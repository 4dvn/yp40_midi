
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 55 02 00 08 00 00 00 00 00 00 00 00     .P. U...........
 8000010:	89 02 00 08 89 02 00 08 89 02 00 08 00 00 00 00     ................
	...
 800002c:	89 02 00 08 89 02 00 08 00 00 00 00 89 02 00 08     ................
 800003c:	3d 03 00 08 89 02 00 08 89 02 00 08 89 02 00 08     =...............
 800004c:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 800005c:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 800006c:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 800007c:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 800008c:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 800009c:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 80000ac:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 80000bc:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 80000cc:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 80000dc:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 80000ec:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 80000fc:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 800010c:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 800011c:	89 02 00 08 89 02 00 08 89 02 00 08 89 02 00 08     ................
 800012c:	89 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
 80001dc:	5f f8 e0 f1                                         _...

080001e0 <__Init_Data>:
    0, 0, 0, 0, 0, 
    0, 0, 0, 
    (intfunc)0xF1E0F85F         /* @0x1E0. This is for boot in RAM mode for STM32F10x High Density devices. */ 
}; 

void __Init_Data(void) { 
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
	unsigned long *src, *dst; 
	/* copy the data segment into ram */ 
	src = &_sidata; 
 80001e6:	4b16      	ldr	r3, [pc, #88]	; (8000240 <__Init_Data+0x60>)
 80001e8:	607b      	str	r3, [r7, #4]
	dst = &_sdata; 
 80001ea:	4b16      	ldr	r3, [pc, #88]	; (8000244 <__Init_Data+0x64>)
 80001ec:	603b      	str	r3, [r7, #0]
	if (src != dst) 
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d010      	beq.n	8000218 <__Init_Data+0x38>
		while(dst < &_edata) 
 80001f6:	e00b      	b.n	8000210 <__Init_Data+0x30>
			*(dst++) = *(src++); 
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	f103 0304 	add.w	r3, r3, #4
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f103 0304 	add.w	r3, r3, #4
 800020e:	607b      	str	r3, [r7, #4]
	unsigned long *src, *dst; 
	/* copy the data segment into ram */ 
	src = &_sidata; 
	dst = &_sdata; 
	if (src != dst) 
		while(dst < &_edata) 
 8000210:	683a      	ldr	r2, [r7, #0]
 8000212:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <__Init_Data+0x68>)
 8000214:	429a      	cmp	r2, r3
 8000216:	d3ef      	bcc.n	80001f8 <__Init_Data+0x18>
			*(dst++) = *(src++); 

	/* zero the bss segment */ 
	dst = &_sbss; 
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <__Init_Data+0x6c>)
 800021a:	603b      	str	r3, [r7, #0]
	while(dst < &_ebss) 
 800021c:	e007      	b.n	800022e <__Init_Data+0x4e>
		*(dst++) = 0; 
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	f04f 0200 	mov.w	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	f103 0304 	add.w	r3, r3, #4
 800022c:	603b      	str	r3, [r7, #0]
		while(dst < &_edata) 
			*(dst++) = *(src++); 

	/* zero the bss segment */ 
	dst = &_sbss; 
	while(dst < &_ebss) 
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <__Init_Data+0x70>)
 8000232:	429a      	cmp	r2, r3
 8000234:	d3f3      	bcc.n	800021e <__Init_Data+0x3e>
		*(dst++) = 0; 
} 
 8000236:	f107 070c 	add.w	r7, r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	08002ab8 	.word	0x08002ab8
 8000244:	20000000 	.word	0x20000000
 8000248:	20000028 	.word	0x20000028
 800024c:	20000028 	.word	0x20000028
 8000250:	20000168 	.word	0x20000168

08000254 <Reset_Handler>:

void Reset_Handler(void) { 
 8000254:	4668      	mov	r0, sp
 8000256:	f020 0107 	bic.w	r1, r0, #7
 800025a:	468d      	mov	sp, r1
 800025c:	b589      	push	{r0, r3, r7, lr}
 800025e:	af00      	add	r7, sp, #0
	__Init_Data(); /* Initialize memory, data and bss */ 
 8000260:	f7ff ffbe 	bl	80001e0 <__Init_Data>
	extern u32 _isr_vectors_offs; /* the offset to the vector table in ram */ 
	SCB->VTOR = 0x08000000 | ((u32)&_isr_vectors_offs & (u32)0x1FFFFF80); /* set interrupt vector table address */ 
 8000264:	4a06      	ldr	r2, [pc, #24]	; (8000280 <Reset_Handler+0x2c>)
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <Reset_Handler+0x30>)
 8000268:	f023 4368 	bic.w	r3, r3, #3892314112	; 0xe8000000
 800026c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000270:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000274:	6093      	str	r3, [r2, #8]
	SystemInit(); /* configure the clock */ 
 8000276:	f000 feab 	bl	8000fd0 <SystemInit>
	main(); /* start execution of the program */ 
 800027a:	f000 f86f 	bl	800035c <main>
	while(1) {} 
 800027e:	e7fe      	b.n	800027e <Reset_Handler+0x2a>
 8000280:	e000ed00 	.word	0xe000ed00
 8000284:	00000000 	.word	0x00000000

08000288 <Default_Handler>:
#pragma weak DMA2_Channel1_IRQHandler	= Default_Handler 
#pragma weak DMA2_Channel2_IRQHandler	= Default_Handler 
#pragma weak DMA2_Channel3_IRQHandler	= Default_Handler 
#pragma weak DMA2_Channel4_5_IRQHandler	= Default_Handler 

void Default_Handler(void) { 
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	while (1) {} 
 800028c:	e7fe      	b.n	800028c <Default_Handler+0x4>
 800028e:	bf00      	nop

08000290 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	da0d      	bge.n	80002c0 <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 80002a4:	490e      	ldr	r1, [pc, #56]	; (80002e0 <NVIC_SetPriority+0x50>)
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	f003 030f 	and.w	r3, r3, #15
 80002ac:	f1a3 0304 	sub.w	r3, r3, #4
 80002b0:	683a      	ldr	r2, [r7, #0]
 80002b2:	b2d2      	uxtb	r2, r2
 80002b4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80002b8:	b2d2      	uxtb	r2, r2
 80002ba:	18cb      	adds	r3, r1, r3
 80002bc:	761a      	strb	r2, [r3, #24]
 80002be:	e00a      	b.n	80002d6 <NVIC_SetPriority+0x46>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80002c0:	4908      	ldr	r1, [pc, #32]	; (80002e4 <NVIC_SetPriority+0x54>)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	683a      	ldr	r2, [r7, #0]
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	18cb      	adds	r3, r1, r3
 80002d2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002d6:	f107 070c 	add.w	r7, r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	e000ed00 	.word	0xe000ed00
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d902      	bls.n	8000300 <SysTick_Config+0x18>
 80002fa:	f04f 0301 	mov.w	r3, #1
 80002fe:	e016      	b.n	800032e <SysTick_Config+0x46>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <SysTick_Config+0x50>)
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000308:	f102 32ff 	add.w	r2, r2, #4294967295
 800030c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800030e:	f04f 30ff 	mov.w	r0, #4294967295
 8000312:	f04f 010f 	mov.w	r1, #15
 8000316:	f7ff ffbb 	bl	8000290 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800031a:	4b07      	ldr	r3, [pc, #28]	; (8000338 <SysTick_Config+0x50>)
 800031c:	f04f 0200 	mov.w	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <SysTick_Config+0x50>)
 8000324:	f04f 0207 	mov.w	r2, #7
 8000328:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800032a:	f04f 0300 	mov.w	r3, #0
}
 800032e:	4618      	mov	r0, r3
 8000330:	f107 0708 	add.w	r7, r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	e000e010 	.word	0xe000e010

0800033c <SysTick_Handler>:
#include "core_cm3.h"


GPIO_InitTypeDef GPIO_InitStructure;

void SysTick_Handler(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0

	GPIOA ->ODR ^= GPIO_Pin_0; // bling bling toggle LED
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <SysTick_Handler+0x1c>)
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <SysTick_Handler+0x1c>)
 8000344:	68d2      	ldr	r2, [r2, #12]
 8000346:	f082 0201 	eor.w	r2, r2, #1
 800034a:	60da      	str	r2, [r3, #12]
	keypins_scan();
 800034c:	f000 fc92 	bl	8000c74 <keypins_scan>
	sust_scan();
 8000350:	f000 fda6 	bl	8000ea0 <sust_scan>
}
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800

0800035c <main>:

int main(int argc, char *argv[]) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]


	SystemInit();
 8000366:	f000 fe33 	bl	8000fd0 <SystemInit>

//DISABLE JTAG, Enable SWD
	RCC_APB2PeriphClockCmd(
 800036a:	f04f 000d 	mov.w	r0, #13
 800036e:	f04f 0101 	mov.w	r1, #1
 8000372:	f001 fda7 	bl	8001ec4 <RCC_APB2PeriphClockCmd>
			RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO,
			ENABLE);
	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // Disable JTAG/SWD so pins are available
 8000376:	481a      	ldr	r0, [pc, #104]	; (80003e0 <main+0x84>)
 8000378:	f04f 0101 	mov.w	r1, #1
 800037c:	f001 f9d4 	bl	8001728 <GPIO_PinRemapConfig>

// GPIO Stuff for LED

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000380:	f04f 0004 	mov.w	r0, #4
 8000384:	f04f 0101 	mov.w	r1, #1
 8000388:	f001 fd9c 	bl	8001ec4 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <main+0x88>)
 800038e:	f04f 0210 	mov.w	r2, #16
 8000392:	70da      	strb	r2, [r3, #3]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <main+0x88>)
 8000396:	f04f 0201 	mov.w	r2, #1
 800039a:	801a      	strh	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <main+0x88>)
 800039e:	f04f 0203 	mov.w	r2, #3
 80003a2:	709a      	strb	r2, [r3, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80003a4:	4810      	ldr	r0, [pc, #64]	; (80003e8 <main+0x8c>)
 80003a6:	490f      	ldr	r1, [pc, #60]	; (80003e4 <main+0x88>)
 80003a8:	f000 ffde 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(GPIOA, GPIO_Pin_0, Bit_SET);
 80003ac:	480e      	ldr	r0, [pc, #56]	; (80003e8 <main+0x8c>)
 80003ae:	f04f 0101 	mov.w	r1, #1
 80003b2:	f04f 0201 	mov.w	r2, #1
 80003b6:	f001 f939 	bl	800162c <GPIO_WriteBit>

// UART init
//	uinit(115200); // debug uart
	uinit(31250); // midi baudrate
 80003ba:	f647 2012 	movw	r0, #31250	; 0x7a12
 80003be:	f000 f84b 	bl	8000458 <uinit>

	keypins_init();
 80003c2:	f000 f977 	bl	80006b4 <keypins_init>

//	SysTick_Config(16777215); // standard
//	SysTick_Config(7200000); // 10 Hz interrupt
//	SysTick_Config(720000); // 100 hz
//	SysTick_Config(72000); // 1000 hz
	SysTick_Config(48000); // 1500 Hz < das höchste der Gefühle für 76 tasten
 80003c6:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80003ca:	f7ff ff8d 	bl	80002e8 <SysTick_Config>
//	SysTick_Config(9000); // 8000 hz




	velotask(); // call velotask and never return
 80003ce:	f000 fd95 	bl	8000efc <velotask>

	return 0;
 80003d2:	f04f 0300 	mov.w	r3, #0


}
 80003d6:	4618      	mov	r0, r3
 80003d8:	f107 0708 	add.w	r7, r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	00300200 	.word	0x00300200
 80003e4:	20000160 	.word	0x20000160
 80003e8:	40010800 	.word	0x40010800

080003ec <comm_put>:





void comm_put(char d) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
	while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET) {
 80003f6:	bf00      	nop
 80003f8:	4808      	ldr	r0, [pc, #32]	; (800041c <comm_put+0x30>)
 80003fa:	f04f 0180 	mov.w	r1, #128	; 0x80
 80003fe:	f002 faa5 	bl	800294c <USART_GetFlagStatus>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d0f7      	beq.n	80003f8 <comm_put+0xc>
		;
	}
	USART_SendData(USART1, (uint16_t) d);
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	b29b      	uxth	r3, r3
 800040c:	4803      	ldr	r0, [pc, #12]	; (800041c <comm_put+0x30>)
 800040e:	4619      	mov	r1, r3
 8000410:	f002 f94a 	bl	80026a8 <USART_SendData>
}
 8000414:	f107 0708 	add.w	r7, r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40013800 	.word	0x40013800

08000420 <comm_puts>:


void comm_puts(const char* s) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	char c;
	while ((c = *s++) != '\0') {
 8000428:	e003      	b.n	8000432 <comm_puts+0x12>
		comm_put(c);
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ffdd 	bl	80003ec <comm_put>
}


void comm_puts(const char* s) {
	char c;
	while ((c = *s++) != '\0') {
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	73fb      	strb	r3, [r7, #15]
 8000438:	7bfb      	ldrb	r3, [r7, #15]
 800043a:	2b00      	cmp	r3, #0
 800043c:	bf0c      	ite	eq
 800043e:	2300      	moveq	r3, #0
 8000440:	2301      	movne	r3, #1
 8000442:	b2db      	uxtb	r3, r3
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	f102 0201 	add.w	r2, r2, #1
 800044a:	607a      	str	r2, [r7, #4]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1ec      	bne.n	800042a <comm_puts+0xa>
		comm_put(c);
	}
}
 8000450:	f107 0710 	add.w	r7, r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <uinit>:

void uinit(u32 rate){
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
//	USART_ClockInitTypeDef USART_ClockInitStructure;

	//enable bus clocks
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 8000460:	f04f 0005 	mov.w	r0, #5
 8000464:	f04f 0101 	mov.w	r1, #1
 8000468:	f001 fd2c 	bl	8001ec4 <RCC_APB2PeriphClockCmd>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800046c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000470:	f04f 0101 	mov.w	r1, #1
 8000474:	f001 fd26 	bl	8001ec4 <RCC_APB2PeriphClockCmd>

	//Configure USART1 Tx (PA.02) as alternate function push-pull
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8000478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800047c:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800047e:	f04f 0318 	mov.w	r3, #24
 8000482:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000484:	f04f 0303 	mov.w	r3, #3
 8000488:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800048a:	f107 031c 	add.w	r3, r7, #28
 800048e:	4818      	ldr	r0, [pc, #96]	; (80004f0 <uinit+0x98>)
 8000490:	4619      	mov	r1, r3
 8000492:	f000 ff69 	bl	8001368 <GPIO_Init>
	//Configure USART1 Rx (PA.03) as input floating
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049a:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800049c:	f04f 0304 	mov.w	r3, #4
 80004a0:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004a2:	f107 031c 	add.w	r3, r7, #28
 80004a6:	4812      	ldr	r0, [pc, #72]	; (80004f0 <uinit+0x98>)
 80004a8:	4619      	mov	r1, r3
 80004aa:	f000 ff5d 	bl	8001368 <GPIO_Init>
	 - One Stop Bit
	 - No parity
	 - Hardware flow control disabled (RTS and CTS signals)
	 - Receive and transmit enabled
	 */
	USART_InitStructure.USART_BaudRate = rate;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80004b2:	f04f 0300 	mov.w	r3, #0
 80004b6:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80004b8:	f04f 0300 	mov.w	r3, #0
 80004bc:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 80004be:	f04f 0300 	mov.w	r3, #0
 80004c2:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80004c4:	f04f 0300 	mov.w	r3, #0
 80004c8:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80004ca:	f04f 030c 	mov.w	r3, #12
 80004ce:	82fb      	strh	r3, [r7, #22]

	/* Configure USART1 */
	USART_Init(USART1, &USART_InitStructure);
 80004d0:	f107 030c 	add.w	r3, r7, #12
 80004d4:	4807      	ldr	r0, [pc, #28]	; (80004f4 <uinit+0x9c>)
 80004d6:	4619      	mov	r1, r3
 80004d8:	f001 fe86 	bl	80021e8 <USART_Init>

	/* Enable the USART1 */
	USART_Cmd(USART1, ENABLE);
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <uinit+0x9c>)
 80004de:	f04f 0101 	mov.w	r1, #1
 80004e2:	f001 ffb7 	bl	8002454 <USART_Cmd>
}
 80004e6:	f107 0720 	add.w	r7, r7, #32
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40010800 	.word	0x40010800
 80004f4:	40013800 	.word	0x40013800

080004f8 <BufferIn>:
	u32 data[BUFFER_SIZE];
	uint8_t read;
	uint8_t write;
} buffer = { { }, 0, 0 };

uint8_t BufferIn(u32 byte) {
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	uint8_t next = ((buffer.write + 1) & BUFFER_MASK);
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <BufferIn+0x54>)
 8000502:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000506:	f103 0301 	add.w	r3, r3, #1
 800050a:	b2db      	uxtb	r3, r3
 800050c:	f003 031f 	and.w	r3, r3, #31
 8000510:	73fb      	strb	r3, [r7, #15]
	if (buffer.read == next)
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <BufferIn+0x54>)
 8000514:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000518:	7bfa      	ldrb	r2, [r7, #15]
 800051a:	429a      	cmp	r2, r3
 800051c:	d102      	bne.n	8000524 <BufferIn+0x2c>
		return FAIL;
 800051e:	f04f 0300 	mov.w	r3, #0
 8000522:	e00d      	b.n	8000540 <BufferIn+0x48>
	buffer.data[buffer.write] = byte;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <BufferIn+0x54>)
 8000526:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800052a:	461a      	mov	r2, r3
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <BufferIn+0x54>)
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	// buffer.data[buffer.write & BUFFER_MASK] = byte; // more secure
	buffer.write = next;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <BufferIn+0x54>)
 8000536:	7bfa      	ldrb	r2, [r7, #15]
 8000538:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	return SUCCESS;
 800053c:	f04f 0301 	mov.w	r3, #1
}
 8000540:	4618      	mov	r0, r3
 8000542:	f107 0714 	add.w	r7, r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	20000028 	.word	0x20000028

08000550 <BufferOut>:

uint8_t BufferOut(u32 *pByte) {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	if (buffer.read == buffer.write)
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <BufferOut+0x58>)
 800055a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <BufferOut+0x58>)
 8000560:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000564:	429a      	cmp	r2, r3
 8000566:	d102      	bne.n	800056e <BufferOut+0x1e>
		return FAIL;
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	e016      	b.n	800059c <BufferOut+0x4c>
	*pByte = buffer.data[buffer.read];
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <BufferOut+0x58>)
 8000570:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000574:	461a      	mov	r2, r3
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <BufferOut+0x58>)
 8000578:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	601a      	str	r2, [r3, #0]
	buffer.read = (buffer.read + 1) & BUFFER_MASK;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <BufferOut+0x58>)
 8000582:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000586:	f103 0301 	add.w	r3, r3, #1
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 031f 	and.w	r3, r3, #31
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <BufferOut+0x58>)
 8000594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	return SUCCESS;
 8000598:	f04f 0301 	mov.w	r3, #1
}
 800059c:	4618      	mov	r0, r3
 800059e:	f107 070c 	add.w	r7, r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	20000028 	.word	0x20000028

080005ac <my_uitoa>:

void my_uitoa(uint32_t zahl, char* string) {
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	int8_t i; // schleifenzähler

	string[8] = '\0'; // String Terminator
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	f103 0308 	add.w	r3, r3, #8
 80005bc:	f04f 0200 	mov.w	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	for (i = 7; i >= 0; i--) {
 80005c2:	f04f 0307 	mov.w	r3, #7
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e020      	b.n	800060c <my_uitoa+0x60>
		string[i] = (zahl % 10) + '0'; // Modulo rechnen, dann den ASCII-Code von '0' addieren
 80005ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	18d0      	adds	r0, r2, r3
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <my_uitoa+0x74>)
 80005d6:	fba3 2301 	umull	r2, r3, r3, r1
 80005da:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80005de:	4613      	mov	r3, r2
 80005e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80005e4:	189b      	adds	r3, r3, r2
 80005e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005ea:	1aca      	subs	r2, r1, r3
 80005ec:	b2d3      	uxtb	r3, r2
 80005ee:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	7003      	strb	r3, [r0, #0]
		zahl /= 10;
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <my_uitoa+0x74>)
 80005fa:	fba3 1302 	umull	r1, r3, r3, r2
 80005fe:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000602:	607b      	str	r3, [r7, #4]

void my_uitoa(uint32_t zahl, char* string) {
	int8_t i; // schleifenzähler

	string[8] = '\0'; // String Terminator
	for (i = 7; i >= 0; i--) {
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	f103 33ff 	add.w	r3, r3, #4294967295
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000610:	2b00      	cmp	r3, #0
 8000612:	dada      	bge.n	80005ca <my_uitoa+0x1e>
		string[i] = (zahl % 10) + '0'; // Modulo rechnen, dann den ASCII-Code von '0' addieren
		zahl /= 10;
	}
}
 8000614:	f107 0714 	add.w	r7, r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	cccccccd 	.word	0xcccccccd

08000624 <Delay>:

void Delay(unsigned int volatile nCount) {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

	for (; nCount != 0; nCount--)
 800062c:	e003      	b.n	8000636 <Delay+0x12>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 33ff 	add.w	r3, r3, #4294967295
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1f8      	bne.n	800062e <Delay+0xa>
		;

}
 800063c:	f107 070c 	add.w	r7, r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <binstr>:

void binstr(char* s, u16 word) {
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
	u8 i;
	for (i = 0; i < 16; i++) {
 8000654:	f04f 0300 	mov.w	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e01c      	b.n	8000696 <binstr+0x4e>
		if (word & (1 << i)) {
 800065c:	887a      	ldrh	r2, [r7, #2]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	fa42 f303 	asr.w	r3, r2, r3
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <binstr+0x36>
			s[15 - i] = '1';
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	f1c3 030f 	rsb	r3, r3, #15
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	18d3      	adds	r3, r2, r3
 8000676:	f04f 0231 	mov.w	r2, #49	; 0x31
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e007      	b.n	800068e <binstr+0x46>
		} else {
			s[15 - i] = '0';
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	f1c3 030f 	rsb	r3, r3, #15
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	18d3      	adds	r3, r2, r3
 8000688:	f04f 0230 	mov.w	r2, #48	; 0x30
 800068c:	701a      	strb	r2, [r3, #0]

}

void binstr(char* s, u16 word) {
	u8 i;
	for (i = 0; i < 16; i++) {
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	f103 0301 	add.w	r3, r3, #1
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	2b0f      	cmp	r3, #15
 800069a:	d9df      	bls.n	800065c <binstr+0x14>
		} else {
			s[15 - i] = '0';
		}
	}

	s[16] = '\0';
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f103 0310 	add.w	r3, r3, #16
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
}
 80006a8:	f107 0714 	add.w	r7, r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <keypins_init>:

void keypins_init(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80006ba:	f04f 0004 	mov.w	r0, #4
 80006be:	f04f 0101 	mov.w	r1, #1
 80006c2:	f001 fbff 	bl	8001ec4 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80006c6:	f04f 0008 	mov.w	r0, #8
 80006ca:	f04f 0101 	mov.w	r1, #1
 80006ce:	f001 fbf9 	bl	8001ec4 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80006d2:	f04f 0010 	mov.w	r0, #16
 80006d6:	f04f 0101 	mov.w	r1, #1
 80006da:	f001 fbf3 	bl	8001ec4 <RCC_APB2PeriphClockCmd>
//	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
//	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);

	// u/d rails side push pull, initialize with zero!
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80006de:	f04f 0310 	mov.w	r3, #16
 80006e2:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80006e4:	f04f 0303 	mov.w	r3, #3
 80006e8:	71bb      	strb	r3, [r7, #6]

	GPIO_InitStructure.GPIO_Pin = U1;
 80006ea:	f04f 0301 	mov.w	r3, #1
 80006ee:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(U1_PORT, &GPIO_InitStructure);
 80006f0:	f107 0304 	add.w	r3, r7, #4
 80006f4:	48ab      	ldr	r0, [pc, #684]	; (80009a4 <keypins_init+0x2f0>)
 80006f6:	4619      	mov	r1, r3
 80006f8:	f000 fe36 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(U1_PORT, U1, Bit_RESET);
 80006fc:	48a9      	ldr	r0, [pc, #676]	; (80009a4 <keypins_init+0x2f0>)
 80006fe:	f04f 0101 	mov.w	r1, #1
 8000702:	f04f 0200 	mov.w	r2, #0
 8000706:	f000 ff91 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = U2;
 800070a:	f04f 0302 	mov.w	r3, #2
 800070e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(U2_PORT, &GPIO_InitStructure);
 8000710:	f107 0304 	add.w	r3, r7, #4
 8000714:	48a3      	ldr	r0, [pc, #652]	; (80009a4 <keypins_init+0x2f0>)
 8000716:	4619      	mov	r1, r3
 8000718:	f000 fe26 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(U2_PORT, U2, Bit_RESET);
 800071c:	48a1      	ldr	r0, [pc, #644]	; (80009a4 <keypins_init+0x2f0>)
 800071e:	f04f 0102 	mov.w	r1, #2
 8000722:	f04f 0200 	mov.w	r2, #0
 8000726:	f000 ff81 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = U3;
 800072a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800072e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(U3_PORT, &GPIO_InitStructure);
 8000730:	f107 0304 	add.w	r3, r7, #4
 8000734:	489c      	ldr	r0, [pc, #624]	; (80009a8 <keypins_init+0x2f4>)
 8000736:	4619      	mov	r1, r3
 8000738:	f000 fe16 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(U3_PORT, U3, Bit_RESET);
 800073c:	489a      	ldr	r0, [pc, #616]	; (80009a8 <keypins_init+0x2f4>)
 800073e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000742:	f04f 0200 	mov.w	r2, #0
 8000746:	f000 ff71 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = U4;
 800074a:	f04f 0308 	mov.w	r3, #8
 800074e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(U4_PORT, &GPIO_InitStructure);
 8000750:	f107 0304 	add.w	r3, r7, #4
 8000754:	4893      	ldr	r0, [pc, #588]	; (80009a4 <keypins_init+0x2f0>)
 8000756:	4619      	mov	r1, r3
 8000758:	f000 fe06 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(U4_PORT, U4, Bit_RESET);
 800075c:	4891      	ldr	r0, [pc, #580]	; (80009a4 <keypins_init+0x2f0>)
 800075e:	f04f 0108 	mov.w	r1, #8
 8000762:	f04f 0200 	mov.w	r2, #0
 8000766:	f000 ff61 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = U5;
 800076a:	f04f 0310 	mov.w	r3, #16
 800076e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(U5_PORT, &GPIO_InitStructure);
 8000770:	f107 0304 	add.w	r3, r7, #4
 8000774:	488b      	ldr	r0, [pc, #556]	; (80009a4 <keypins_init+0x2f0>)
 8000776:	4619      	mov	r1, r3
 8000778:	f000 fdf6 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(U5_PORT, U5, Bit_RESET);
 800077c:	4889      	ldr	r0, [pc, #548]	; (80009a4 <keypins_init+0x2f0>)
 800077e:	f04f 0110 	mov.w	r1, #16
 8000782:	f04f 0200 	mov.w	r2, #0
 8000786:	f000 ff51 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = U6;
 800078a:	f04f 0320 	mov.w	r3, #32
 800078e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(U6_PORT, &GPIO_InitStructure);
 8000790:	f107 0304 	add.w	r3, r7, #4
 8000794:	4883      	ldr	r0, [pc, #524]	; (80009a4 <keypins_init+0x2f0>)
 8000796:	4619      	mov	r1, r3
 8000798:	f000 fde6 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(U6_PORT, U6, Bit_RESET);
 800079c:	4881      	ldr	r0, [pc, #516]	; (80009a4 <keypins_init+0x2f0>)
 800079e:	f04f 0120 	mov.w	r1, #32
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	f000 ff41 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = U7;
 80007aa:	f04f 0340 	mov.w	r3, #64	; 0x40
 80007ae:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(U7_PORT, &GPIO_InitStructure);
 80007b0:	f107 0304 	add.w	r3, r7, #4
 80007b4:	487b      	ldr	r0, [pc, #492]	; (80009a4 <keypins_init+0x2f0>)
 80007b6:	4619      	mov	r1, r3
 80007b8:	f000 fdd6 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(U7_PORT, U7, Bit_RESET);
 80007bc:	4879      	ldr	r0, [pc, #484]	; (80009a4 <keypins_init+0x2f0>)
 80007be:	f04f 0140 	mov.w	r1, #64	; 0x40
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	f000 ff31 	bl	800162c <GPIO_WriteBit>

	GPIO_InitStructure.GPIO_Pin = D1;
 80007ca:	f04f 0380 	mov.w	r3, #128	; 0x80
 80007ce:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(D1_PORT, &GPIO_InitStructure);
 80007d0:	f107 0304 	add.w	r3, r7, #4
 80007d4:	4873      	ldr	r0, [pc, #460]	; (80009a4 <keypins_init+0x2f0>)
 80007d6:	4619      	mov	r1, r3
 80007d8:	f000 fdc6 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(D1_PORT, D1, Bit_RESET);
 80007dc:	4871      	ldr	r0, [pc, #452]	; (80009a4 <keypins_init+0x2f0>)
 80007de:	f04f 0180 	mov.w	r1, #128	; 0x80
 80007e2:	f04f 0200 	mov.w	r2, #0
 80007e6:	f000 ff21 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = D2;
 80007ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ee:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(D2_PORT, &GPIO_InitStructure);
 80007f0:	f107 0304 	add.w	r3, r7, #4
 80007f4:	486b      	ldr	r0, [pc, #428]	; (80009a4 <keypins_init+0x2f0>)
 80007f6:	4619      	mov	r1, r3
 80007f8:	f000 fdb6 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(D2_PORT, D2, Bit_RESET);
 80007fc:	4869      	ldr	r0, [pc, #420]	; (80009a4 <keypins_init+0x2f0>)
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f000 ff11 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = D3;
 800080a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800080e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(D3_PORT, &GPIO_InitStructure);
 8000810:	f107 0304 	add.w	r3, r7, #4
 8000814:	4863      	ldr	r0, [pc, #396]	; (80009a4 <keypins_init+0x2f0>)
 8000816:	4619      	mov	r1, r3
 8000818:	f000 fda6 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(D3_PORT, D3, Bit_RESET);
 800081c:	4861      	ldr	r0, [pc, #388]	; (80009a4 <keypins_init+0x2f0>)
 800081e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000822:	f04f 0200 	mov.w	r2, #0
 8000826:	f000 ff01 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = D4;
 800082a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(D4_PORT, &GPIO_InitStructure);
 8000830:	f107 0304 	add.w	r3, r7, #4
 8000834:	485b      	ldr	r0, [pc, #364]	; (80009a4 <keypins_init+0x2f0>)
 8000836:	4619      	mov	r1, r3
 8000838:	f000 fd96 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(D4_PORT, D4, Bit_RESET);
 800083c:	4859      	ldr	r0, [pc, #356]	; (80009a4 <keypins_init+0x2f0>)
 800083e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000842:	f04f 0200 	mov.w	r2, #0
 8000846:	f000 fef1 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = D5;
 800084a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800084e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(D5_PORT, &GPIO_InitStructure);
 8000850:	f107 0304 	add.w	r3, r7, #4
 8000854:	4853      	ldr	r0, [pc, #332]	; (80009a4 <keypins_init+0x2f0>)
 8000856:	4619      	mov	r1, r3
 8000858:	f000 fd86 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(D5_PORT, D5, Bit_RESET);
 800085c:	4851      	ldr	r0, [pc, #324]	; (80009a4 <keypins_init+0x2f0>)
 800085e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000862:	f04f 0200 	mov.w	r2, #0
 8000866:	f000 fee1 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = D6;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(D6_PORT, &GPIO_InitStructure);
 8000870:	f107 0304 	add.w	r3, r7, #4
 8000874:	484b      	ldr	r0, [pc, #300]	; (80009a4 <keypins_init+0x2f0>)
 8000876:	4619      	mov	r1, r3
 8000878:	f000 fd76 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(D6_PORT, D6, Bit_RESET);
 800087c:	4849      	ldr	r0, [pc, #292]	; (80009a4 <keypins_init+0x2f0>)
 800087e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000882:	f04f 0200 	mov.w	r2, #0
 8000886:	f000 fed1 	bl	800162c <GPIO_WriteBit>
	GPIO_InitStructure.GPIO_Pin = D7;
 800088a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(D7_PORT, &GPIO_InitStructure);
 8000890:	f107 0304 	add.w	r3, r7, #4
 8000894:	4843      	ldr	r0, [pc, #268]	; (80009a4 <keypins_init+0x2f0>)
 8000896:	4619      	mov	r1, r3
 8000898:	f000 fd66 	bl	8001368 <GPIO_Init>
	GPIO_WriteBit(D7_PORT, D7, Bit_RESET);
 800089c:	4841      	ldr	r0, [pc, #260]	; (80009a4 <keypins_init+0x2f0>)
 800089e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a2:	f04f 0200 	mov.w	r2, #0
 80008a6:	f000 fec1 	bl	800162c <GPIO_WriteBit>
	/*
	 * for i in $(seq 0 7); do echo GPIO_InitStructure.GPIO_Pin = N"$i"\;; echo GPIO_Init\(N"$i"_PORT, \&GPIO_InitStructure\)\;; echo GPIO_WriteBit\(GPIOC, N"$i", Bit_SET\)\;; done
	 */

	// key pins are input with pulldown!
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 80008aa:	f04f 0328 	mov.w	r3, #40	; 0x28
 80008ae:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = KEY01;
 80008b0:	f04f 0302 	mov.w	r3, #2
 80008b4:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY01_PORT, &GPIO_InitStructure);
 80008b6:	f107 0304 	add.w	r3, r7, #4
 80008ba:	483b      	ldr	r0, [pc, #236]	; (80009a8 <keypins_init+0x2f4>)
 80008bc:	4619      	mov	r1, r3
 80008be:	f000 fd53 	bl	8001368 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = KEY02;
 80008c2:	f04f 0304 	mov.w	r3, #4
 80008c6:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY02_PORT, &GPIO_InitStructure);
 80008c8:	f107 0304 	add.w	r3, r7, #4
 80008cc:	4836      	ldr	r0, [pc, #216]	; (80009a8 <keypins_init+0x2f4>)
 80008ce:	4619      	mov	r1, r3
 80008d0:	f000 fd4a 	bl	8001368 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = KEY03;
 80008d4:	f04f 0308 	mov.w	r3, #8
 80008d8:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY03_PORT, &GPIO_InitStructure);
 80008da:	f107 0304 	add.w	r3, r7, #4
 80008de:	4832      	ldr	r0, [pc, #200]	; (80009a8 <keypins_init+0x2f4>)
 80008e0:	4619      	mov	r1, r3
 80008e2:	f000 fd41 	bl	8001368 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = KEY04;
 80008e6:	f04f 0310 	mov.w	r3, #16
 80008ea:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY04_PORT, &GPIO_InitStructure);
 80008ec:	f107 0304 	add.w	r3, r7, #4
 80008f0:	482d      	ldr	r0, [pc, #180]	; (80009a8 <keypins_init+0x2f4>)
 80008f2:	4619      	mov	r1, r3
 80008f4:	f000 fd38 	bl	8001368 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = KEY05;
 80008f8:	f04f 0320 	mov.w	r3, #32
 80008fc:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY05_PORT, &GPIO_InitStructure);
 80008fe:	f107 0304 	add.w	r3, r7, #4
 8000902:	4829      	ldr	r0, [pc, #164]	; (80009a8 <keypins_init+0x2f4>)
 8000904:	4619      	mov	r1, r3
 8000906:	f000 fd2f 	bl	8001368 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = KEY06;
 800090a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800090e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY06_PORT, &GPIO_InitStructure);
 8000910:	f107 0304 	add.w	r3, r7, #4
 8000914:	4824      	ldr	r0, [pc, #144]	; (80009a8 <keypins_init+0x2f4>)
 8000916:	4619      	mov	r1, r3
 8000918:	f000 fd26 	bl	8001368 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = KEY07;
 800091c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8000920:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY07_PORT, &GPIO_InitStructure);
 8000922:	f107 0304 	add.w	r3, r7, #4
 8000926:	4820      	ldr	r0, [pc, #128]	; (80009a8 <keypins_init+0x2f4>)
 8000928:	4619      	mov	r1, r3
 800092a:	f000 fd1d 	bl	8001368 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = KEY08;
 800092e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000932:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY08_PORT, &GPIO_InitStructure);
 8000934:	f107 0304 	add.w	r3, r7, #4
 8000938:	481b      	ldr	r0, [pc, #108]	; (80009a8 <keypins_init+0x2f4>)
 800093a:	4619      	mov	r1, r3
 800093c:	f000 fd14 	bl	8001368 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = KEY09;
 8000940:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000944:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY09_PORT, &GPIO_InitStructure);
 8000946:	f107 0304 	add.w	r3, r7, #4
 800094a:	4816      	ldr	r0, [pc, #88]	; (80009a4 <keypins_init+0x2f0>)
 800094c:	4619      	mov	r1, r3
 800094e:	f000 fd0b 	bl	8001368 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = KEY10;
 8000952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000956:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY10_PORT, &GPIO_InitStructure);
 8000958:	f107 0304 	add.w	r3, r7, #4
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <keypins_init+0x2f0>)
 800095e:	4619      	mov	r1, r3
 8000960:	f000 fd02 	bl	8001368 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = KEY11;
 8000964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000968:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY11_PORT, &GPIO_InitStructure);
 800096a:	f107 0304 	add.w	r3, r7, #4
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <keypins_init+0x2f4>)
 8000970:	4619      	mov	r1, r3
 8000972:	f000 fcf9 	bl	8001368 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = KEY12;
 8000976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(KEY12_PORT, &GPIO_InitStructure);
 800097c:	f107 0304 	add.w	r3, r7, #4
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <keypins_init+0x2f4>)
 8000982:	4619      	mov	r1, r3
 8000984:	f000 fcf0 	bl	8001368 <GPIO_Init>

	// sustain pin is pullup
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8000988:	f04f 0348 	mov.w	r3, #72	; 0x48
 800098c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = SUST;
 800098e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000992:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(SUST_PORT, &GPIO_InitStructure);
 8000994:	f107 0304 	add.w	r3, r7, #4
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <keypins_init+0x2f8>)
 800099a:	4619      	mov	r1, r3
 800099c:	f000 fce4 	bl	8001368 <GPIO_Init>
 80009a0:	e006      	b.n	80009b0 <keypins_init+0x2fc>
 80009a2:	bf00      	nop
 80009a4:	40010c00 	.word	0x40010c00
 80009a8:	40010800 	.word	0x40010800
 80009ac:	40011000 	.word	0x40011000
}
 80009b0:	f107 0708 	add.w	r7, r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <keypins_set_u>:

void keypins_set_u(u16 word_in) {
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	80fb      	strh	r3, [r7, #6]

	u32 word = (u32) word_in;
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	60fb      	str	r3, [r7, #12]

	U1_PORT ->BSRR = (U1 << 16) | (((word & (1 << 0)) >> 0) * U1 );
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <keypins_set_u+0xac>)
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	f002 0201 	and.w	r2, r2, #1
 80009ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80009d2:	611a      	str	r2, [r3, #16]
	U2_PORT ->BSRR = (U2 << 16) | (((word & (1 << 1)) >> 1) * U2 );
 80009d4:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <keypins_set_u+0xac>)
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	f002 0202 	and.w	r2, r2, #2
 80009dc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80009e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80009e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80009e8:	611a      	str	r2, [r3, #16]
	U3_PORT ->BSRR = (U3 << 16) | (((word & (1 << 2)) >> 2) * U3 );
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <keypins_set_u+0xb0>)
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	f002 0204 	and.w	r2, r2, #4
 80009f2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80009f6:	ea4f 32c2 	mov.w	r2, r2, lsl #15
 80009fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009fe:	611a      	str	r2, [r3, #16]
	U4_PORT ->BSRR = (U4 << 16) | (((word & (1 << 3)) >> 3) * U4 );
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <keypins_set_u+0xac>)
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	f002 0208 	and.w	r2, r2, #8
 8000a08:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8000a0c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a10:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000a14:	611a      	str	r2, [r3, #16]
	U5_PORT ->BSRR = (U5 << 16) | (((word & (1 << 4)) >> 4) * U5 );
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <keypins_set_u+0xac>)
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	f002 0210 	and.w	r2, r2, #16
 8000a1e:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8000a22:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000a26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a2a:	611a      	str	r2, [r3, #16]
	U6_PORT ->BSRR = (U6 << 16) | (((word & (1 << 5)) >> 5) * U6 );
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <keypins_set_u+0xac>)
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	f002 0220 	and.w	r2, r2, #32
 8000a34:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000a38:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8000a3c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000a40:	611a      	str	r2, [r3, #16]
	U7_PORT ->BSRR = (U7 << 16) | (((word & (1 << 6)) >> 6) * U7 );
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <keypins_set_u+0xac>)
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000a4a:	ea4f 1292 	mov.w	r2, r2, lsr #6
 8000a4e:	ea4f 1282 	mov.w	r2, r2, lsl #6
 8000a52:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000a56:	611a      	str	r2, [r3, #16]

}
 8000a58:	f107 0714 	add.w	r7, r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40010c00 	.word	0x40010c00
 8000a68:	40010800 	.word	0x40010800

08000a6c <keypins_set_d>:

void keypins_set_d(u16 word_in) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	80fb      	strh	r3, [r7, #6]

	u32 word = (u32) word_in;
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	60fb      	str	r3, [r7, #12]

	D1_PORT ->BSRR = (D1 << 16) | (((word & (1 << 0)) >> 0) * D1 );
 8000a7a:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <keypins_set_d+0xb0>)
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	f002 0201 	and.w	r2, r2, #1
 8000a82:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 8000a86:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a8a:	611a      	str	r2, [r3, #16]
	D2_PORT ->BSRR = (D2 << 16) | (((word & (1 << 1)) >> 1) * D2 );
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <keypins_set_d+0xb0>)
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	f002 0202 	and.w	r2, r2, #2
 8000a94:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8000a98:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000a9c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000aa0:	611a      	str	r2, [r3, #16]
	D3_PORT ->BSRR = (D3 << 16) | (((word & (1 << 2)) >> 2) * D3 );
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <keypins_set_d+0xb0>)
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	f002 0204 	and.w	r2, r2, #4
 8000aaa:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8000aae:	ea4f 2242 	mov.w	r2, r2, lsl #9
 8000ab2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000ab6:	611a      	str	r2, [r3, #16]
	D4_PORT ->BSRR = (D4 << 16) | (((word & (1 << 3)) >> 3) * D4 );
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <keypins_set_d+0xb0>)
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	f002 0208 	and.w	r2, r2, #8
 8000ac0:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8000ac4:	ea4f 2282 	mov.w	r2, r2, lsl #10
 8000ac8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000acc:	611a      	str	r2, [r3, #16]
	D5_PORT ->BSRR = (D5 << 16) | (((word & (1 << 4)) >> 4) * D5 );
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <keypins_set_d+0xb0>)
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	f002 0210 	and.w	r2, r2, #16
 8000ad6:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8000ada:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 8000ade:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000ae2:	611a      	str	r2, [r3, #16]
	D6_PORT ->BSRR = (D6 << 16) | (((word & (1 << 5)) >> 5) * D6 );
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <keypins_set_d+0xb0>)
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	f002 0220 	and.w	r2, r2, #32
 8000aec:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000af0:	ea4f 3202 	mov.w	r2, r2, lsl #12
 8000af4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000af8:	611a      	str	r2, [r3, #16]
	D7_PORT ->BSRR = (D7 << 16) | (((word & (1 << 6)) >> 6) * D7 );
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <keypins_set_d+0xb0>)
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000b02:	ea4f 1292 	mov.w	r2, r2, lsr #6
 8000b06:	ea4f 3242 	mov.w	r2, r2, lsl #13
 8000b0a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000b0e:	611a      	str	r2, [r3, #16]

}
 8000b10:	f107 0714 	add.w	r7, r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40010c00 	.word	0x40010c00

08000b20 <keypins_read_keys>:

u16 keypins_read_keys(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

	u16 return_val = 0;
 8000b26:	f04f 0300 	mov.w	r3, #0
 8000b2a:	80fb      	strh	r3, [r7, #6]

	return_val |= GPIO_ReadInputDataBit(KEY01_PORT, KEY01 ) << 0;
 8000b2c:	484f      	ldr	r0, [pc, #316]	; (8000c6c <keypins_read_keys+0x14c>)
 8000b2e:	f04f 0102 	mov.w	r1, #2
 8000b32:	f000 fd07 	bl	8001544 <GPIO_ReadInputDataBit>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	80fb      	strh	r3, [r7, #6]
	return_val |= GPIO_ReadInputDataBit(KEY02_PORT, KEY02 ) << 1;
 8000b40:	484a      	ldr	r0, [pc, #296]	; (8000c6c <keypins_read_keys+0x14c>)
 8000b42:	f04f 0104 	mov.w	r1, #4
 8000b46:	f000 fcfd 	bl	8001544 <GPIO_ReadInputDataBit>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	80fb      	strh	r3, [r7, #6]
	return_val |= GPIO_ReadInputDataBit(KEY03_PORT, KEY03 ) << 2;
 8000b5a:	4844      	ldr	r0, [pc, #272]	; (8000c6c <keypins_read_keys+0x14c>)
 8000b5c:	f04f 0108 	mov.w	r1, #8
 8000b60:	f000 fcf0 	bl	8001544 <GPIO_ReadInputDataBit>
 8000b64:	4603      	mov	r3, r0
 8000b66:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	80fb      	strh	r3, [r7, #6]
	return_val |= GPIO_ReadInputDataBit(KEY04_PORT, KEY04 ) << 3;
 8000b74:	483d      	ldr	r0, [pc, #244]	; (8000c6c <keypins_read_keys+0x14c>)
 8000b76:	f04f 0110 	mov.w	r1, #16
 8000b7a:	f000 fce3 	bl	8001544 <GPIO_ReadInputDataBit>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	80fb      	strh	r3, [r7, #6]
	return_val |= GPIO_ReadInputDataBit(KEY05_PORT, KEY05 ) << 4;
 8000b8e:	4837      	ldr	r0, [pc, #220]	; (8000c6c <keypins_read_keys+0x14c>)
 8000b90:	f04f 0120 	mov.w	r1, #32
 8000b94:	f000 fcd6 	bl	8001544 <GPIO_ReadInputDataBit>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	80fb      	strh	r3, [r7, #6]
	return_val |= GPIO_ReadInputDataBit(KEY06_PORT, KEY06 ) << 5;
 8000ba8:	4830      	ldr	r0, [pc, #192]	; (8000c6c <keypins_read_keys+0x14c>)
 8000baa:	f04f 0140 	mov.w	r1, #64	; 0x40
 8000bae:	f000 fcc9 	bl	8001544 <GPIO_ReadInputDataBit>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	80fb      	strh	r3, [r7, #6]
	return_val |= GPIO_ReadInputDataBit(KEY07_PORT, KEY07 ) << 6;
 8000bc2:	482a      	ldr	r0, [pc, #168]	; (8000c6c <keypins_read_keys+0x14c>)
 8000bc4:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000bc8:	f000 fcbc 	bl	8001544 <GPIO_ReadInputDataBit>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	80fb      	strh	r3, [r7, #6]
	return_val |= GPIO_ReadInputDataBit(KEY08_PORT, KEY08 ) << 7;
 8000bdc:	4823      	ldr	r0, [pc, #140]	; (8000c6c <keypins_read_keys+0x14c>)
 8000bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be2:	f000 fcaf 	bl	8001544 <GPIO_ReadInputDataBit>
 8000be6:	4603      	mov	r3, r0
 8000be8:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	80fb      	strh	r3, [r7, #6]
	return_val |= GPIO_ReadInputDataBit(KEY09_PORT, KEY09 ) << 8;
 8000bf6:	481e      	ldr	r0, [pc, #120]	; (8000c70 <keypins_read_keys+0x150>)
 8000bf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfc:	f000 fca2 	bl	8001544 <GPIO_ReadInputDataBit>
 8000c00:	4603      	mov	r3, r0
 8000c02:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	80fb      	strh	r3, [r7, #6]
	return_val |= GPIO_ReadInputDataBit(KEY10_PORT, KEY10 ) << 9;
 8000c10:	4817      	ldr	r0, [pc, #92]	; (8000c70 <keypins_read_keys+0x150>)
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	f000 fc95 	bl	8001544 <GPIO_ReadInputDataBit>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	ea4f 2343 	mov.w	r3, r3, lsl #9
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	80fb      	strh	r3, [r7, #6]
	return_val |= GPIO_ReadInputDataBit(KEY11_PORT, KEY11 ) << 10;
 8000c2a:	4810      	ldr	r0, [pc, #64]	; (8000c6c <keypins_read_keys+0x14c>)
 8000c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c30:	f000 fc88 	bl	8001544 <GPIO_ReadInputDataBit>
 8000c34:	4603      	mov	r3, r0
 8000c36:	ea4f 2383 	mov.w	r3, r3, lsl #10
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	80fb      	strh	r3, [r7, #6]
	return_val |= GPIO_ReadInputDataBit(KEY12_PORT, KEY12 ) << 11;
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <keypins_read_keys+0x14c>)
 8000c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4a:	f000 fc7b 	bl	8001544 <GPIO_ReadInputDataBit>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	80fb      	strh	r3, [r7, #6]

	return return_val;
 8000c5e:	88fb      	ldrh	r3, [r7, #6]

}
 8000c60:	4618      	mov	r0, r3
 8000c62:	f107 0708 	add.w	r7, r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40010800 	.word	0x40010800
 8000c70:	40010c00 	.word	0x40010c00

08000c74 <keypins_scan>:

void keypins_scan(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	static u8 i;
	uint16_t border_mask;
	static u8 j;
	static u8 key_number, note_number;

	for (i = 0; i < 14; i++) {
 8000c7a:	4b83      	ldr	r3, [pc, #524]	; (8000e88 <keypins_scan+0x214>)
 8000c7c:	f04f 0200 	mov.w	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e0f7      	b.n	8000e74 <keypins_scan+0x200>

		// set one line low each
		// unterscheide zwischen downs und ups:
		if (i % 2) { // is uneven row = upper contact
 8000c84:	4b80      	ldr	r3, [pc, #512]	; (8000e88 <keypins_scan+0x214>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d038      	beq.n	8000d04 <keypins_scan+0x90>
			keypins_set_d(0); //FASTER // nop doesnt matter
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	f7ff fee9 	bl	8000a6c <keypins_set_d>
			keypins_set_u((1 << (i / 2)));
 8000c9a:	4b7b      	ldr	r3, [pc, #492]	; (8000e88 <keypins_scan+0x214>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f04f 0201 	mov.w	r2, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fe82 	bl	80009b8 <keypins_set_u>
			Delay(30);
 8000cb4:	f04f 001e 	mov.w	r0, #30
 8000cb8:	f7ff fcb4 	bl	8000624 <Delay>
			if (i / 2 == 0) {
 8000cbc:	4b72      	ldr	r3, [pc, #456]	; (8000e88 <keypins_scan+0x214>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d803      	bhi.n	8000ccc <keypins_scan+0x58>
				border_mask = 0b111111111000; // mask out open keys at the lower border of the keyboard
 8000cc4:	f640 73f8 	movw	r3, #4088	; 0xff8
 8000cc8:	80fb      	strh	r3, [r7, #6]
 8000cca:	e00d      	b.n	8000ce8 <keypins_scan+0x74>
			} else if (i / 2 == 6) {
 8000ccc:	4b6e      	ldr	r3, [pc, #440]	; (8000e88 <keypins_scan+0x214>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	f1a3 030c 	sub.w	r3, r3, #12
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d803      	bhi.n	8000ce2 <keypins_scan+0x6e>
				border_mask = 0b000001111111; // mask out open keys at the upper border of the keyboard
 8000cda:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8000cde:	80fb      	strh	r3, [r7, #6]
 8000ce0:	e002      	b.n	8000ce8 <keypins_scan+0x74>
			} else {
				border_mask = 0b111111111111; // mask unused part of the 16bit variable, there are only 12 keypins
 8000ce2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000ce6:	80fb      	strh	r3, [r7, #6]
			}
			cur_row = border_mask & (~keypins_read_keys());
 8000ce8:	f7ff ff1a 	bl	8000b20 <keypins_read_keys>
 8000cec:	4603      	mov	r3, r0
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	ea6f 0303 	mvn.w	r3, r3
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b63      	ldr	r3, [pc, #396]	; (8000e8c <keypins_scan+0x218>)
 8000d00:	801a      	strh	r2, [r3, #0]
 8000d02:	e01a      	b.n	8000d3a <keypins_scan+0xc6>
		} else { // is even row = lower contact
			keypins_set_u(0); //FASTER // nop doesnt matter
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	f7ff fe56 	bl	80009b8 <keypins_set_u>
			keypins_set_d((1 << (i / 2)));
 8000d0c:	4b5e      	ldr	r3, [pc, #376]	; (8000e88 <keypins_scan+0x214>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f04f 0201 	mov.w	r2, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fea3 	bl	8000a6c <keypins_set_d>
			Delay(30);
 8000d26:	f04f 001e 	mov.w	r0, #30
 8000d2a:	f7ff fc7b 	bl	8000624 <Delay>
			cur_row = (keypins_read_keys());
 8000d2e:	f7ff fef7 	bl	8000b20 <keypins_read_keys>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b55      	ldr	r3, [pc, #340]	; (8000e8c <keypins_scan+0x218>)
 8000d38:	801a      	strh	r2, [r3, #0]
		}

		for (j = 0; j < 12; j++) {
 8000d3a:	4b55      	ldr	r3, [pc, #340]	; (8000e90 <keypins_scan+0x21c>)
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e08b      	b.n	8000e5c <keypins_scan+0x1e8>

			key_number = (i / 2) * 12 + j;
 8000d44:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <keypins_scan+0x214>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8000d54:	18d3      	adds	r3, r2, r3
 8000d56:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b4c      	ldr	r3, [pc, #304]	; (8000e90 <keypins_scan+0x21c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b4b      	ldr	r3, [pc, #300]	; (8000e94 <keypins_scan+0x220>)
 8000d66:	701a      	strb	r2, [r3, #0]
			note_number = key_number + BOTTOM_KEY;
 8000d68:	4b4a      	ldr	r3, [pc, #296]	; (8000e94 <keypins_scan+0x220>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	f103 0319 	add.w	r3, r3, #25
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b49      	ldr	r3, [pc, #292]	; (8000e98 <keypins_scan+0x224>)
 8000d74:	701a      	strb	r2, [r3, #0]

			if (i % 2) { // is uneven row = upper contact
 8000d76:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <keypins_scan+0x214>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d038      	beq.n	8000df6 <keypins_scan+0x182>

				if (cur_row & (1 << j)) { // upper contact closed
 8000d84:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <keypins_scan+0x218>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <keypins_scan+0x21c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	fa42 f303 	asr.w	r3, r2, r3
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d015      	beq.n	8000dc6 <keypins_scan+0x152>
					if (delay_mem[key_number] < 65534) { // count time that key is on, stop at 254
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <keypins_scan+0x220>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b3e      	ldr	r3, [pc, #248]	; (8000e9c <keypins_scan+0x228>)
 8000da2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000da6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d84f      	bhi.n	8000e4e <keypins_scan+0x1da>
						delay_mem[key_number]++;
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <keypins_scan+0x220>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4a3a      	ldr	r2, [pc, #232]	; (8000e9c <keypins_scan+0x228>)
 8000db4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000db8:	f102 0201 	add.w	r2, r2, #1
 8000dbc:	b291      	uxth	r1, r2
 8000dbe:	4a37      	ldr	r2, [pc, #220]	; (8000e9c <keypins_scan+0x228>)
 8000dc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000dc4:	e043      	b.n	8000e4e <keypins_scan+0x1da>
					}
				} else { // upper contact open -> reset to idle state
					//if (delay_mem[key_number] == 255) {
					if (delay_mem[key_number] == 65535) {
 8000dc6:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <keypins_scan+0x220>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <keypins_scan+0x228>)
 8000dce:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d104      	bne.n	8000de4 <keypins_scan+0x170>
//						comm_puts("\n\r");
//						my_uitoa(0, textbuffer);
//						comm_puts(textbuffer);
//						comm_puts("\n\r");
//						comm_puts("\n\r");
						BufferIn((u32) note_number);
 8000dda:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <keypins_scan+0x224>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fb8a 	bl	80004f8 <BufferIn>
//						BufferIn(0x80); //Note OFF
//						BufferIn(note_number); //Note
//						BufferIn(0x00); //Velocity: 0

					}
					delay_mem[key_number] = 0;
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <keypins_scan+0x220>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <keypins_scan+0x228>)
 8000dec:	f04f 0100 	mov.w	r1, #0
 8000df0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000df4:	e02b      	b.n	8000e4e <keypins_scan+0x1da>
					//}
				}

			} else { // is even row = lower contact

				if (cur_row & (1 << j)) { // lower contact closed
 8000df6:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <keypins_scan+0x218>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <keypins_scan+0x21c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	fa42 f303 	asr.w	r3, r2, r3
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d020      	beq.n	8000e4e <keypins_scan+0x1da>
					if (delay_mem[key_number] < 65535) {
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <keypins_scan+0x220>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <keypins_scan+0x228>)
 8000e14:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d016      	beq.n	8000e4e <keypins_scan+0x1da>
//						comm_puts("\n\r");
//						BufferIn(0x90); //Note ON
//						BufferIn(note_number); //Note
//						BufferIn(velo); //Velocity 0-127
						BufferIn(
								((u32) note_number)
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <keypins_scan+0x224>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
										| (((u32) delay_mem[key_number]) << 16));
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <keypins_scan+0x220>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <keypins_scan+0x228>)
 8000e2e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000e32:	ea4f 4303 	mov.w	r3, r3, lsl #16
//						comm_puts("\n\r");
//						comm_puts("\n\r");
//						BufferIn(0x90); //Note ON
//						BufferIn(note_number); //Note
//						BufferIn(velo); //Velocity 0-127
						BufferIn(
 8000e36:	4313      	orrs	r3, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fb5d 	bl	80004f8 <BufferIn>
								((u32) note_number)
										| (((u32) delay_mem[key_number]) << 16));

						delay_mem[key_number] = 65535;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <keypins_scan+0x220>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <keypins_scan+0x228>)
 8000e46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			keypins_set_d((1 << (i / 2)));
			Delay(30);
			cur_row = (keypins_read_keys());
		}

		for (j = 0; j < 12; j++) {
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <keypins_scan+0x21c>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	f103 0301 	add.w	r3, r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <keypins_scan+0x21c>)
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <keypins_scan+0x21c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b0b      	cmp	r3, #11
 8000e62:	f67f af6f 	bls.w	8000d44 <keypins_scan+0xd0>
	static u8 i;
	uint16_t border_mask;
	static u8 j;
	static u8 key_number, note_number;

	for (i = 0; i < 14; i++) {
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <keypins_scan+0x214>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	f103 0301 	add.w	r3, r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <keypins_scan+0x214>)
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <keypins_scan+0x214>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b0d      	cmp	r3, #13
 8000e7a:	f67f af03 	bls.w	8000c84 <keypins_scan+0x10>
//		binstr(textbuffer,cur_row);
//		comm_puts(textbuffer);
//		comm_puts("\n\r");
	}
//	comm_puts("\n\r");
}
 8000e7e:	f107 0708 	add.w	r7, r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200000ae 	.word	0x200000ae
 8000e8c:	200000b0 	.word	0x200000b0
 8000e90:	200000b2 	.word	0x200000b2
 8000e94:	200000b3 	.word	0x200000b3
 8000e98:	200000b4 	.word	0x200000b4
 8000e9c:	200000b8 	.word	0x200000b8

08000ea0 <sust_scan>:


void sust_scan(void){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

	static u8 old_sust_state, sust_state = 0;

	sust_state = GPIO_ReadInputDataBit(SUST_PORT, SUST );
 8000ea4:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <sust_scan+0x50>)
 8000ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eaa:	f000 fb4b 	bl	8001544 <GPIO_ReadInputDataBit>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <sust_scan+0x54>)
 8000eb4:	701a      	strb	r2, [r3, #0]
	if(sust_state && (!(old_sust_state)) ) {//detect rising edge on sustain pedal
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <sust_scan+0x54>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <sust_scan+0x2e>
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <sust_scan+0x58>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d103      	bne.n	8000ece <sust_scan+0x2e>
		BufferIn(SUSTAIN_ON);
 8000ec6:	f04f 0001 	mov.w	r0, #1
 8000eca:	f7ff fb15 	bl	80004f8 <BufferIn>
	}
	if((!(sust_state)) && old_sust_state ) {//detect falling edge on sustain pedal
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <sust_scan+0x54>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d107      	bne.n	8000ee6 <sust_scan+0x46>
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <sust_scan+0x58>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <sust_scan+0x46>
		BufferIn(SUSTAIN_OFF);
 8000ede:	f04f 0000 	mov.w	r0, #0
 8000ee2:	f7ff fb09 	bl	80004f8 <BufferIn>
	}

	old_sust_state = sust_state;
 8000ee6:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <sust_scan+0x54>)
 8000ee8:	781a      	ldrb	r2, [r3, #0]
 8000eea:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <sust_scan+0x58>)
 8000eec:	701a      	strb	r2, [r3, #0]

}
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40011000 	.word	0x40011000
 8000ef4:	200000ac 	.word	0x200000ac
 8000ef8:	200000ad 	.word	0x200000ad

08000efc <velotask>:

void velotask(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	e000      	b.n	8000f06 <velotask+0xa>
				comm_put(0x00); //Velocity: 0
			}

		}

	}
 8000f04:	bf00      	nop
	u32 payload;
	int16_t velo;

	while (1) {

		if (BufferOut(&payload)) {
 8000f06:	463b      	mov	r3, r7
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fb21 	bl	8000550 <BufferOut>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f7      	beq.n	8000f04 <velotask+0x8>

			if (payload & 0xFFFF0000) { //it's a note on event, because there is velocity information
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000f1a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d025      	beq.n	8000f6e <velotask+0x72>
				velo = 1400 / (payload >> 16);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000f28:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8000f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f30:	80fb      	strh	r3, [r7, #6]
				if (velo < 0) {
 8000f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da03      	bge.n	8000f42 <velotask+0x46>
					velo = 0;
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	80fb      	strh	r3, [r7, #6]
 8000f40:	e006      	b.n	8000f50 <velotask+0x54>
				} else if (velo > 127) {
 8000f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f46:	2b7f      	cmp	r3, #127	; 0x7f
 8000f48:	dd02      	ble.n	8000f50 <velotask+0x54>
					velo = 127;
 8000f4a:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8000f4e:	80fb      	strh	r3, [r7, #6]
				}
				comm_put(0x90); //Note ON
 8000f50:	f04f 0090 	mov.w	r0, #144	; 0x90
 8000f54:	f7ff fa4a 	bl	80003ec <comm_put>
				comm_put((u8) payload); //Note
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fa45 	bl	80003ec <comm_put>
				comm_put(velo); //Velocity 0-127
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fa40 	bl	80003ec <comm_put>
				comm_put(0x00); //Velocity: 0
			}

		}

	}
 8000f6c:	e7ca      	b.n	8000f04 <velotask+0x8>
					velo = 127;
				}
				comm_put(0x90); //Note ON
				comm_put((u8) payload); //Note
				comm_put(velo); //Velocity 0-127
			} else if (((u8) payload) < BOTTOM_KEY) { // control?
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b18      	cmp	r3, #24
 8000f74:	d81e      	bhi.n	8000fb4 <velotask+0xb8>
				if (payload == SUSTAIN_ON){
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d10b      	bne.n	8000f94 <velotask+0x98>
					comm_put(0b10110000); //Control Change
 8000f7c:	f04f 00b0 	mov.w	r0, #176	; 0xb0
 8000f80:	f7ff fa34 	bl	80003ec <comm_put>
					comm_put(64); //Sustain/Damper Pedal
 8000f84:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000f88:	f7ff fa30 	bl	80003ec <comm_put>
					comm_put(0); //on
 8000f8c:	f04f 0000 	mov.w	r0, #0
 8000f90:	f7ff fa2c 	bl	80003ec <comm_put>
				}
				if (payload == SUSTAIN_OFF){
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1b4      	bne.n	8000f04 <velotask+0x8>
					comm_put(0b10110000); //Control Change
 8000f9a:	f04f 00b0 	mov.w	r0, #176	; 0xb0
 8000f9e:	f7ff fa25 	bl	80003ec <comm_put>
					comm_put(64); //Sustain/Damper Pedal
 8000fa2:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000fa6:	f7ff fa21 	bl	80003ec <comm_put>
					comm_put(127); //off
 8000faa:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8000fae:	f7ff fa1d 	bl	80003ec <comm_put>
				comm_put(0x00); //Velocity: 0
			}

		}

	}
 8000fb2:	e7a7      	b.n	8000f04 <velotask+0x8>
					comm_put(64); //Sustain/Damper Pedal
					comm_put(127); //off
				}

			} else { // it's a note off event
				comm_put(0x80); //Note OFF
 8000fb4:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000fb8:	f7ff fa18 	bl	80003ec <comm_put>
				comm_put((u8) payload); //Note
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa13 	bl	80003ec <comm_put>
				comm_put(0x00); //Velocity: 0
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	f7ff fa0f 	bl	80003ec <comm_put>
			}

		}

	}
 8000fce:	e799      	b.n	8000f04 <velotask+0x8>

08000fd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <SystemInit+0x5c>)
 8000fd6:	4a15      	ldr	r2, [pc, #84]	; (800102c <SystemInit+0x5c>)
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	f042 0201 	orr.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <SystemInit+0x5c>)
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <SystemInit+0x5c>)
 8000fe4:	6859      	ldr	r1, [r3, #4]
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <SystemInit+0x60>)
 8000fe8:	400b      	ands	r3, r1
 8000fea:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fec:	4a0f      	ldr	r2, [pc, #60]	; (800102c <SystemInit+0x5c>)
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <SystemInit+0x5c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <SystemInit+0x5c>)
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <SystemInit+0x5c>)
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001006:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <SystemInit+0x5c>)
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <SystemInit+0x5c>)
 800100c:	6852      	ldr	r2, [r2, #4]
 800100e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001012:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SystemInit+0x5c>)
 8001016:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800101a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800101c:	f000 f87e 	bl	800111c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SystemInit+0x64>)
 8001022:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001026:	609a      	str	r2, [r3, #8]
#endif 
}
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	f8ff0000 	.word	0xf8ff0000
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	f04f 0300 	mov.w	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <SystemCoreClockUpdate+0xd0>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 030c 	and.w	r3, r3, #12
 8001058:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b04      	cmp	r3, #4
 800105e:	d007      	beq.n	8001070 <SystemCoreClockUpdate+0x38>
 8001060:	2b08      	cmp	r3, #8
 8001062:	d009      	beq.n	8001078 <SystemCoreClockUpdate+0x40>
 8001064:	2b00      	cmp	r3, #0
 8001066:	d135      	bne.n	80010d4 <SystemCoreClockUpdate+0x9c>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <SystemCoreClockUpdate+0xd4>)
 800106a:	4a29      	ldr	r2, [pc, #164]	; (8001110 <SystemCoreClockUpdate+0xd8>)
 800106c:	601a      	str	r2, [r3, #0]
      break;
 800106e:	e035      	b.n	80010dc <SystemCoreClockUpdate+0xa4>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <SystemCoreClockUpdate+0xd4>)
 8001072:	4a27      	ldr	r2, [pc, #156]	; (8001110 <SystemCoreClockUpdate+0xd8>)
 8001074:	601a      	str	r2, [r3, #0]
      break;
 8001076:	e031      	b.n	80010dc <SystemCoreClockUpdate+0xa4>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <SystemCoreClockUpdate+0xd0>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001080:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <SystemCoreClockUpdate+0xd0>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8001092:	f103 0302 	add.w	r3, r3, #2
 8001096:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d106      	bne.n	80010ac <SystemCoreClockUpdate+0x74>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <SystemCoreClockUpdate+0xdc>)
 80010a2:	fb02 f203 	mul.w	r2, r2, r3
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <SystemCoreClockUpdate+0xd4>)
 80010a8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80010aa:	e017      	b.n	80010dc <SystemCoreClockUpdate+0xa4>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <SystemCoreClockUpdate+0xd0>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <SystemCoreClockUpdate+0x8e>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <SystemCoreClockUpdate+0xdc>)
 80010bc:	fb02 f203 	mul.w	r2, r2, r3
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <SystemCoreClockUpdate+0xd4>)
 80010c2:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80010c4:	e00a      	b.n	80010dc <SystemCoreClockUpdate+0xa4>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	4a11      	ldr	r2, [pc, #68]	; (8001110 <SystemCoreClockUpdate+0xd8>)
 80010ca:	fb02 f203 	mul.w	r2, r2, r3
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <SystemCoreClockUpdate+0xd4>)
 80010d0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80010d2:	e003      	b.n	80010dc <SystemCoreClockUpdate+0xa4>

    default:
      SystemCoreClock = HSI_VALUE;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <SystemCoreClockUpdate+0xd4>)
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <SystemCoreClockUpdate+0xd8>)
 80010d8:	601a      	str	r2, [r3, #0]
      break;
 80010da:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <SystemCoreClockUpdate+0xd0>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010e4:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <SystemCoreClockUpdate+0xe0>)
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <SystemCoreClockUpdate+0xd4>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	fa22 f203 	lsr.w	r2, r2, r3
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SystemCoreClockUpdate+0xd4>)
 80010fc:	601a      	str	r2, [r3, #0]
}
 80010fe:	f107 0714 	add.w	r7, r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40021000 	.word	0x40021000
 800110c:	20000000 	.word	0x20000000
 8001110:	007a1200 	.word	0x007a1200
 8001114:	003d0900 	.word	0x003d0900
 8001118:	20000004 	.word	0x20000004

0800111c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001120:	f000 f802 	bl	8001128 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop

08001128 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <SetSysClockTo72+0x100>)
 800113c:	4a3a      	ldr	r2, [pc, #232]	; (8001228 <SetSysClockTo72+0x100>)
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001144:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <SetSysClockTo72+0x100>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f103 0301 	add.w	r3, r3, #1
 8001156:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d103      	bne.n	8001166 <SetSysClockTo72+0x3e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001164:	d1ef      	bne.n	8001146 <SetSysClockTo72+0x1e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <SetSysClockTo72+0x100>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <SetSysClockTo72+0x52>
  {
    HSEStatus = (uint32_t)0x01;
 8001172:	f04f 0301 	mov.w	r3, #1
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	e002      	b.n	8001180 <SetSysClockTo72+0x58>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d14b      	bne.n	800121e <SetSysClockTo72+0xf6>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <SetSysClockTo72+0x104>)
 8001188:	4a28      	ldr	r2, [pc, #160]	; (800122c <SetSysClockTo72+0x104>)
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	f042 0210 	orr.w	r2, r2, #16
 8001190:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <SetSysClockTo72+0x104>)
 8001194:	4a25      	ldr	r2, [pc, #148]	; (800122c <SetSysClockTo72+0x104>)
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	f022 0203 	bic.w	r2, r2, #3
 800119c:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <SetSysClockTo72+0x104>)
 80011a0:	4a22      	ldr	r2, [pc, #136]	; (800122c <SetSysClockTo72+0x104>)
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	f042 0202 	orr.w	r2, r2, #2
 80011a8:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <SetSysClockTo72+0x100>)
 80011ac:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <SetSysClockTo72+0x100>)
 80011ae:	6852      	ldr	r2, [r2, #4]
 80011b0:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <SetSysClockTo72+0x100>)
 80011b4:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <SetSysClockTo72+0x100>)
 80011b6:	6852      	ldr	r2, [r2, #4]
 80011b8:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <SetSysClockTo72+0x100>)
 80011bc:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <SetSysClockTo72+0x100>)
 80011be:	6852      	ldr	r2, [r2, #4]
 80011c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011c4:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <SetSysClockTo72+0x100>)
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <SetSysClockTo72+0x100>)
 80011ca:	6852      	ldr	r2, [r2, #4]
 80011cc:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80011d0:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <SetSysClockTo72+0x100>)
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <SetSysClockTo72+0x100>)
 80011d6:	6852      	ldr	r2, [r2, #4]
 80011d8:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80011dc:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <SetSysClockTo72+0x100>)
 80011e0:	4a11      	ldr	r2, [pc, #68]	; (8001228 <SetSysClockTo72+0x100>)
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80011e8:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011ea:	bf00      	nop
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <SetSysClockTo72+0x100>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f9      	beq.n	80011ec <SetSysClockTo72+0xc4>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <SetSysClockTo72+0x100>)
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <SetSysClockTo72+0x100>)
 80011fc:	6852      	ldr	r2, [r2, #4]
 80011fe:	f022 0203 	bic.w	r2, r2, #3
 8001202:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <SetSysClockTo72+0x100>)
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <SetSysClockTo72+0x100>)
 8001208:	6852      	ldr	r2, [r2, #4]
 800120a:	f042 0202 	orr.w	r2, r2, #2
 800120e:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001210:	bf00      	nop
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SetSysClockTo72+0x100>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d1f9      	bne.n	8001212 <SetSysClockTo72+0xea>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800121e:	f107 070c 	add.w	r7, r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	40021000 	.word	0x40021000
 800122c:	40022000 	.word	0x40022000

08001230 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4b3c      	ldr	r3, [pc, #240]	; (800132c <GPIO_DeInit+0xfc>)
 800123c:	429a      	cmp	r2, r3
 800123e:	d10c      	bne.n	800125a <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8001240:	f04f 0004 	mov.w	r0, #4
 8001244:	f04f 0101 	mov.w	r1, #1
 8001248:	f000 fe7c 	bl	8001f44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 800124c:	f04f 0004 	mov.w	r0, #4
 8001250:	f04f 0100 	mov.w	r1, #0
 8001254:	f000 fe76 	bl	8001f44 <RCC_APB2PeriphResetCmd>
 8001258:	e064      	b.n	8001324 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4b34      	ldr	r3, [pc, #208]	; (8001330 <GPIO_DeInit+0x100>)
 800125e:	429a      	cmp	r2, r3
 8001260:	d10c      	bne.n	800127c <GPIO_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001262:	f04f 0008 	mov.w	r0, #8
 8001266:	f04f 0101 	mov.w	r1, #1
 800126a:	f000 fe6b 	bl	8001f44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 800126e:	f04f 0008 	mov.w	r0, #8
 8001272:	f04f 0100 	mov.w	r1, #0
 8001276:	f000 fe65 	bl	8001f44 <RCC_APB2PeriphResetCmd>
 800127a:	e053      	b.n	8001324 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <GPIO_DeInit+0x104>)
 8001280:	429a      	cmp	r2, r3
 8001282:	d10c      	bne.n	800129e <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8001284:	f04f 0010 	mov.w	r0, #16
 8001288:	f04f 0101 	mov.w	r1, #1
 800128c:	f000 fe5a 	bl	8001f44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8001290:	f04f 0010 	mov.w	r0, #16
 8001294:	f04f 0100 	mov.w	r1, #0
 8001298:	f000 fe54 	bl	8001f44 <RCC_APB2PeriphResetCmd>
 800129c:	e042      	b.n	8001324 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4b25      	ldr	r3, [pc, #148]	; (8001338 <GPIO_DeInit+0x108>)
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d10c      	bne.n	80012c0 <GPIO_DeInit+0x90>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80012a6:	f04f 0020 	mov.w	r0, #32
 80012aa:	f04f 0101 	mov.w	r1, #1
 80012ae:	f000 fe49 	bl	8001f44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80012b2:	f04f 0020 	mov.w	r0, #32
 80012b6:	f04f 0100 	mov.w	r1, #0
 80012ba:	f000 fe43 	bl	8001f44 <RCC_APB2PeriphResetCmd>
 80012be:	e031      	b.n	8001324 <GPIO_DeInit+0xf4>
  }    
  else if (GPIOx == GPIOE)
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <GPIO_DeInit+0x10c>)
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d10c      	bne.n	80012e2 <GPIO_DeInit+0xb2>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80012c8:	f04f 0040 	mov.w	r0, #64	; 0x40
 80012cc:	f04f 0101 	mov.w	r1, #1
 80012d0:	f000 fe38 	bl	8001f44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80012d4:	f04f 0040 	mov.w	r0, #64	; 0x40
 80012d8:	f04f 0100 	mov.w	r1, #0
 80012dc:	f000 fe32 	bl	8001f44 <RCC_APB2PeriphResetCmd>
 80012e0:	e020      	b.n	8001324 <GPIO_DeInit+0xf4>
  } 
  else if (GPIOx == GPIOF)
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <GPIO_DeInit+0x110>)
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d10c      	bne.n	8001304 <GPIO_DeInit+0xd4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80012ea:	f04f 0080 	mov.w	r0, #128	; 0x80
 80012ee:	f04f 0101 	mov.w	r1, #1
 80012f2:	f000 fe27 	bl	8001f44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80012f6:	f04f 0080 	mov.w	r0, #128	; 0x80
 80012fa:	f04f 0100 	mov.w	r1, #0
 80012fe:	f000 fe21 	bl	8001f44 <RCC_APB2PeriphResetCmd>
 8001302:	e00f      	b.n	8001324 <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOG)
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <GPIO_DeInit+0x114>)
 8001308:	429a      	cmp	r2, r3
 800130a:	d10b      	bne.n	8001324 <GPIO_DeInit+0xf4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 800130c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001310:	f04f 0101 	mov.w	r1, #1
 8001314:	f000 fe16 	bl	8001f44 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8001318:	f44f 7080 	mov.w	r0, #256	; 0x100
 800131c:	f04f 0100 	mov.w	r1, #0
 8001320:	f000 fe10 	bl	8001f44 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8001324:	f107 0708 	add.w	r7, r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40010800 	.word	0x40010800
 8001330:	40010c00 	.word	0x40010c00
 8001334:	40011000 	.word	0x40011000
 8001338:	40011400 	.word	0x40011400
 800133c:	40011800 	.word	0x40011800
 8001340:	40011c00 	.word	0x40011c00
 8001344:	40012000 	.word	0x40012000

08001348 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 800134c:	f04f 0001 	mov.w	r0, #1
 8001350:	f04f 0101 	mov.w	r1, #1
 8001354:	f000 fdf6 	bl	8001f44 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8001358:	f04f 0001 	mov.w	r0, #1
 800135c:	f04f 0100 	mov.w	r1, #0
 8001360:	f000 fdf0 	bl	8001f44 <RCC_APB2PeriphResetCmd>
}
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop

08001368 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	78db      	ldrb	r3, [r3, #3]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <GPIO_Init+0x4e>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	789b      	ldrb	r3, [r3, #2]
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d04e      	beq.n	800145e <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	e041      	b.n	8001452 <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	f04f 0201 	mov.w	r2, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d12d      	bne.n	800144a <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80013f4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f04f 020f 	mov.w	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	ea6f 0303 	mvn.w	r3, r3
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	4013      	ands	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	4313      	orrs	r3, r2
 800141a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	78db      	ldrb	r3, [r3, #3]
 8001420:	2b28      	cmp	r3, #40	; 0x28
 8001422:	d107      	bne.n	8001434 <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	f04f 0201 	mov.w	r2, #1
 800142a:	fa02 f203 	lsl.w	r2, r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	615a      	str	r2, [r3, #20]
 8001432:	e00a      	b.n	800144a <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	78db      	ldrb	r3, [r3, #3]
 8001438:	2b48      	cmp	r3, #72	; 0x48
 800143a:	d106      	bne.n	800144a <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	f04f 0201 	mov.w	r2, #1
 8001442:	fa02 f203 	lsl.w	r2, r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	f103 0301 	add.w	r3, r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b07      	cmp	r3, #7
 8001456:	d9ba      	bls.n	80013ce <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	2bff      	cmp	r3, #255	; 0xff
 8001464:	d953      	bls.n	800150e <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	e046      	b.n	8001502 <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	f103 0308 	add.w	r3, r3, #8
 800147a:	f04f 0201 	mov.w	r2, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d130      	bne.n	80014fa <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800149e:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f04f 020f 	mov.w	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	ea6f 0303 	mvn.w	r3, r3
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4013      	ands	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	78db      	ldrb	r3, [r3, #3]
 80014ca:	2b28      	cmp	r3, #40	; 0x28
 80014cc:	d108      	bne.n	80014e0 <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	f103 0308 	add.w	r3, r3, #8
 80014d4:	f04f 0201 	mov.w	r2, #1
 80014d8:	fa02 f203 	lsl.w	r2, r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	78db      	ldrb	r3, [r3, #3]
 80014e4:	2b48      	cmp	r3, #72	; 0x48
 80014e6:	d108      	bne.n	80014fa <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	f103 0308 	add.w	r3, r3, #8
 80014ee:	f04f 0201 	mov.w	r2, #1
 80014f2:	fa02 f203 	lsl.w	r2, r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	f103 0301 	add.w	r3, r3, #1
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b07      	cmp	r3, #7
 8001506:	d9b5      	bls.n	8001474 <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	605a      	str	r2, [r3, #4]
  }
}
 800150e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001526:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f04f 0202 	mov.w	r2, #2
 800152e:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f04f 0204 	mov.w	r2, #4
 8001536:	70da      	strb	r2, [r3, #3]
}
 8001538:	f107 070c 	add.w	r7, r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop

08001544 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	4013      	ands	r3, r2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001562:	f04f 0301 	mov.w	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e002      	b.n	8001570 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	f107 0714 	add.w	r7, r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	f107 070c 	add.w	r7, r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop

0800159c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80015ba:	f04f 0301 	mov.w	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e002      	b.n	80015c8 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	f107 0714 	add.w	r7, r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop

080015d8 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	b29b      	uxth	r3, r3
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	f107 070c 	add.w	r7, r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001600:	887a      	ldrh	r2, [r7, #2]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	611a      	str	r2, [r3, #16]
}
 8001606:	f107 070c 	add.w	r7, r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800161c:	887a      	ldrh	r2, [r7, #2]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	615a      	str	r2, [r3, #20]
}
 8001622:	f107 070c 	add.w	r7, r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	460a      	mov	r2, r1
 8001638:	807a      	strh	r2, [r7, #2]
 800163a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800163c:	787b      	ldrb	r3, [r7, #1]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	e002      	b.n	8001650 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	615a      	str	r2, [r3, #20]
  }
}
 8001650:	f107 070c 	add.w	r7, r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop

0800165c <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8001668:	887a      	ldrh	r2, [r7, #2]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60da      	str	r2, [r3, #12]
}
 800166e:	f107 070c 	add.w	r7, r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 8001684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001688:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001698:	887a      	ldrh	r2, [r7, #2]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	60fb      	str	r3, [r7, #12]
}
 80016b0:	f107 0714 	add.w	r7, r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop

080016bc <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	71fa      	strb	r2, [r7, #7]
 80016c8:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <GPIO_EventOutputConfig+0x48>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <GPIO_EventOutputConfig+0x48>)
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	601a      	str	r2, [r3, #0]
}
 80016fa:	f107 0714 	add.w	r7, r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40010000 	.word	0x40010000

08001708 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <GPIO_EventOutputCmd+0x1c>)
 8001714:	79fa      	ldrb	r2, [r7, #7]
 8001716:	601a      	str	r2, [r3, #0]
}
 8001718:	f107 070c 	add.w	r7, r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	4220001c 	.word	0x4220001c

08001728 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	da03      	bge.n	800175a <GPIO_PinRemapConfig+0x32>
  {
    tmpreg = AFIO->MAPR2;
 8001752:	4b34      	ldr	r3, [pc, #208]	; (8001824 <GPIO_PinRemapConfig+0xfc>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e002      	b.n	8001760 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800175a:	4b32      	ldr	r3, [pc, #200]	; (8001824 <GPIO_PinRemapConfig+0xfc>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001766:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800176a:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8001772:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8001776:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800177e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001782:	d10a      	bne.n	800179a <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800178a:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <GPIO_PinRemapConfig+0xfc>)
 800178e:	4a25      	ldr	r2, [pc, #148]	; (8001824 <GPIO_PinRemapConfig+0xfc>)
 8001790:	6852      	ldr	r2, [r2, #4]
 8001792:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	e026      	b.n	80017e8 <GPIO_PinRemapConfig+0xc0>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d010      	beq.n	80017c6 <GPIO_PinRemapConfig+0x9e>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f04f 0203 	mov.w	r2, #3
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	ea6f 0303 	mvn.w	r3, r3
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4013      	ands	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e010      	b.n	80017e8 <GPIO_PinRemapConfig+0xc0>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	ea4f 5353 	mov.w	r3, r3, lsr #21
 80017cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	ea6f 0303 	mvn.w	r3, r3
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80017e6:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00a      	beq.n	8001804 <GPIO_PinRemapConfig+0xdc>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	ea4f 5353 	mov.w	r3, r3, lsr #21
 80017f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4313      	orrs	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	da03      	bge.n	8001812 <GPIO_PinRemapConfig+0xea>
  {
    AFIO->MAPR2 = tmpreg;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <GPIO_PinRemapConfig+0xfc>)
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	61da      	str	r2, [r3, #28]
 8001810:	e002      	b.n	8001818 <GPIO_PinRemapConfig+0xf0>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <GPIO_PinRemapConfig+0xfc>)
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	605a      	str	r2, [r3, #4]
  }  
}
 8001818:	f107 071c 	add.w	r7, r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40010000 	.word	0x40010000

08001828 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001828:	b490      	push	{r4, r7}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	71fa      	strb	r2, [r7, #7]
 8001834:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001846:	f04f 020f 	mov.w	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <GPIO_EXTILineConfig+0x94>)
 8001852:	79ba      	ldrb	r2, [r7, #6]
 8001854:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	4918      	ldr	r1, [pc, #96]	; (80018bc <GPIO_EXTILineConfig+0x94>)
 800185c:	79b8      	ldrb	r0, [r7, #6]
 800185e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8001862:	b2c0      	uxtb	r0, r0
 8001864:	f100 0002 	add.w	r0, r0, #2
 8001868:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	ea6f 0101 	mvn.w	r1, r1
 8001872:	4001      	ands	r1, r0
 8001874:	f102 0202 	add.w	r2, r2, #2
 8001878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <GPIO_EXTILineConfig+0x94>)
 800187e:	79ba      	ldrb	r2, [r7, #6]
 8001880:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	490d      	ldr	r1, [pc, #52]	; (80018bc <GPIO_EXTILineConfig+0x94>)
 8001888:	79b8      	ldrb	r0, [r7, #6]
 800188a:	ea4f 0090 	mov.w	r0, r0, lsr #2
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	f100 0002 	add.w	r0, r0, #2
 8001894:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8001898:	79fc      	ldrb	r4, [r7, #7]
 800189a:	79b9      	ldrb	r1, [r7, #6]
 800189c:	f001 0103 	and.w	r1, r1, #3
 80018a0:	ea4f 0181 	mov.w	r1, r1, lsl #2
 80018a4:	fa04 f101 	lsl.w	r1, r4, r1
 80018a8:	4301      	orrs	r1, r0
 80018aa:	f102 0202 	add.w	r2, r2, #2
 80018ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80018b2:	f107 0710 	add.w	r7, r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc90      	pop	{r4, r7}
 80018ba:	4770      	bx	lr
 80018bc:	40010000 	.word	0x40010000

080018c0 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <GPIO_ETH_MediaInterfaceConfig+0x18>)
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	601a      	str	r2, [r3, #0]
}
 80018ce:	f107 070c 	add.w	r7, r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	422000dc 	.word	0x422000dc

080018dc <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <RCC_DeInit+0x54>)
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <RCC_DeInit+0x54>)
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80018ec:	4a10      	ldr	r2, [pc, #64]	; (8001930 <RCC_DeInit+0x54>)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <RCC_DeInit+0x54>)
 80018f0:	6859      	ldr	r1, [r3, #4]
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <RCC_DeInit+0x58>)
 80018f4:	400b      	ands	r3, r1
 80018f6:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <RCC_DeInit+0x54>)
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <RCC_DeInit+0x54>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <RCC_DeInit+0x54>)
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <RCC_DeInit+0x54>)
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001912:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <RCC_DeInit+0x54>)
 8001916:	4a06      	ldr	r2, [pc, #24]	; (8001930 <RCC_DeInit+0x54>)
 8001918:	6852      	ldr	r2, [r2, #4]
 800191a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800191e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <RCC_DeInit+0x54>)
 8001922:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001926:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	f8ff0000 	.word	0xf8ff0000

08001938 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <RCC_HSEConfig+0x58>)
 8001942:	4a13      	ldr	r2, [pc, #76]	; (8001990 <RCC_HSEConfig+0x58>)
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800194a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <RCC_HSEConfig+0x58>)
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <RCC_HSEConfig+0x58>)
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001956:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195e:	d003      	beq.n	8001968 <RCC_HSEConfig+0x30>
 8001960:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001964:	d007      	beq.n	8001976 <RCC_HSEConfig+0x3e>
 8001966:	e00d      	b.n	8001984 <RCC_HSEConfig+0x4c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <RCC_HSEConfig+0x58>)
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <RCC_HSEConfig+0x58>)
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001972:	601a      	str	r2, [r3, #0]
      break;
 8001974:	e007      	b.n	8001986 <RCC_HSEConfig+0x4e>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <RCC_HSEConfig+0x58>)
 8001978:	4a05      	ldr	r2, [pc, #20]	; (8001990 <RCC_HSEConfig+0x58>)
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8001980:	601a      	str	r2, [r3, #0]
      break;
 8001982:	e000      	b.n	8001986 <RCC_HSEConfig+0x4e>
      
    default:
      break;
 8001984:	bf00      	nop
  }
}
 8001986:	f107 070c 	add.w	r7, r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	40021000 	.word	0x40021000

08001994 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80019ac:	f04f 0031 	mov.w	r0, #49	; 0x31
 80019b0:	f000 fb38 	bl	8002024 <RCC_GetFlagStatus>
 80019b4:	4603      	mov	r3, r0
 80019b6:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f103 0301 	add.w	r3, r3, #1
 80019be:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80019c6:	d002      	beq.n	80019ce <RCC_WaitForHSEStartUp+0x3a>
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0ee      	beq.n	80019ac <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80019ce:	f04f 0031 	mov.w	r0, #49	; 0x31
 80019d2:	f000 fb27 	bl	8002024 <RCC_GetFlagStatus>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 80019dc:	f04f 0301 	mov.w	r3, #1
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	e002      	b.n	80019ea <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	f107 0708 	add.w	r7, r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop

080019f8 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <RCC_AdjustHSICalibrationValue+0x3c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a14:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <RCC_AdjustHSICalibrationValue+0x3c>)
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	601a      	str	r2, [r3, #0]
}
 8001a28:	f107 0714 	add.w	r7, r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000

08001a38 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <RCC_HSICmd+0x1c>)
 8001a44:	79fa      	ldrb	r2, [r7, #7]
 8001a46:	601a      	str	r2, [r3, #0]
}
 8001a48:	f107 070c 	add.w	r7, r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	42420000 	.word	0x42420000

08001a58 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <RCC_PLLConfig+0x3c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001a74:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <RCC_PLLConfig+0x3c>)
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	605a      	str	r2, [r3, #4]
}
 8001a88:	f107 0714 	add.w	r7, r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000

08001a98 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <RCC_PLLCmd+0x1c>)
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	f107 070c 	add.w	r7, r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	42420060 	.word	0x42420060

08001ab8 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <RCC_SYSCLKConfig+0x34>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f023 0303 	bic.w	r3, r3, #3
 8001ad2:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <RCC_SYSCLKConfig+0x34>)
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	605a      	str	r2, [r3, #4]
}
 8001ae2:	f107 0714 	add.w	r7, r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000

08001af0 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <RCC_GetSYSCLKSource+0x18>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	b2db      	uxtb	r3, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40021000 	.word	0x40021000

08001b0c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <RCC_HCLKConfig+0x34>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b26:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <RCC_HCLKConfig+0x34>)
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	605a      	str	r2, [r3, #4]
}
 8001b36:	f107 0714 	add.w	r7, r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40021000 	.word	0x40021000

08001b44 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <RCC_PCLK1Config+0x34>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b5e:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <RCC_PCLK1Config+0x34>)
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	605a      	str	r2, [r3, #4]
}
 8001b6e:	f107 0714 	add.w	r7, r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000

08001b7c <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <RCC_PCLK2Config+0x38>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b96:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <RCC_PCLK2Config+0x38>)
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	605a      	str	r2, [r3, #4]
}
 8001baa:	f107 0714 	add.w	r7, r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	71fa      	strb	r2, [r7, #7]
 8001bc4:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <RCC_ITConfig+0x48>)
 8001bce:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <RCC_ITConfig+0x48>)
 8001bd0:	7812      	ldrb	r2, [r2, #0]
 8001bd2:	b2d1      	uxtb	r1, r2
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]
 8001bdc:	e00a      	b.n	8001bf4 <RCC_ITConfig+0x3c>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <RCC_ITConfig+0x48>)
 8001be0:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <RCC_ITConfig+0x48>)
 8001be2:	7812      	ldrb	r2, [r2, #0]
 8001be4:	b2d1      	uxtb	r1, r2
 8001be6:	79fa      	ldrb	r2, [r7, #7]
 8001be8:	ea6f 0202 	mvn.w	r2, r2
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	400a      	ands	r2, r1
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]
  }
}
 8001bf4:	f107 070c 	add.w	r7, r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40021009 	.word	0x40021009

08001c04 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <RCC_USBCLKConfig+0x18>)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	f107 070c 	add.w	r7, r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	424200d8 	.word	0x424200d8

08001c20 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <RCC_ADCCLKConfig+0x34>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c3a:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <RCC_ADCCLKConfig+0x34>)
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	605a      	str	r2, [r3, #4]
}
 8001c4a:	f107 0714 	add.w	r7, r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	40021000 	.word	0x40021000

08001c58 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <RCC_LSEConfig+0x48>)
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <RCC_LSEConfig+0x48>)
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d002      	beq.n	8001c7e <RCC_LSEConfig+0x26>
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d005      	beq.n	8001c88 <RCC_LSEConfig+0x30>
 8001c7c:	e009      	b.n	8001c92 <RCC_LSEConfig+0x3a>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <RCC_LSEConfig+0x48>)
 8001c80:	f04f 0201 	mov.w	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
      break;
 8001c86:	e005      	b.n	8001c94 <RCC_LSEConfig+0x3c>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <RCC_LSEConfig+0x48>)
 8001c8a:	f04f 0205 	mov.w	r2, #5
 8001c8e:	701a      	strb	r2, [r3, #0]
      break;            
 8001c90:	e000      	b.n	8001c94 <RCC_LSEConfig+0x3c>
      
    default:
      break;      
 8001c92:	bf00      	nop
  }
}
 8001c94:	f107 070c 	add.w	r7, r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021020 	.word	0x40021020

08001ca4 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <RCC_LSICmd+0x1c>)
 8001cb0:	79fa      	ldrb	r2, [r7, #7]
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	f107 070c 	add.w	r7, r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	42420480 	.word	0x42420480

08001cc4 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <RCC_RTCCLKConfig+0x20>)
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <RCC_RTCCLKConfig+0x20>)
 8001cd0:	6a11      	ldr	r1, [r2, #32]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	621a      	str	r2, [r3, #32]
}
 8001cd8:	f107 070c 	add.w	r7, r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <RCC_RTCCLKCmd+0x1c>)
 8001cf4:	79fa      	ldrb	r2, [r7, #7]
 8001cf6:	601a      	str	r2, [r3, #0]
}
 8001cf8:	f107 070c 	add.w	r7, r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	4242043c 	.word	0x4242043c

08001d08 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001d28:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <RCC_GetClocksFreq+0x168>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d007      	beq.n	8001d48 <RCC_GetClocksFreq+0x40>
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d009      	beq.n	8001d50 <RCC_GetClocksFreq+0x48>
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d135      	bne.n	8001dac <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a4c      	ldr	r2, [pc, #304]	; (8001e74 <RCC_GetClocksFreq+0x16c>)
 8001d44:	601a      	str	r2, [r3, #0]
      break;
 8001d46:	e035      	b.n	8001db4 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a4a      	ldr	r2, [pc, #296]	; (8001e74 <RCC_GetClocksFreq+0x16c>)
 8001d4c:	601a      	str	r2, [r3, #0]
      break;
 8001d4e:	e031      	b.n	8001db4 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001d50:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <RCC_GetClocksFreq+0x168>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d58:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001d5a:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <RCC_GetClocksFreq+0x168>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8001d6a:	f103 0302 	add.w	r3, r3, #2
 8001d6e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4a3f      	ldr	r2, [pc, #252]	; (8001e78 <RCC_GetClocksFreq+0x170>)
 8001d7a:	fb02 f203 	mul.w	r2, r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001d82:	e017      	b.n	8001db4 <RCC_GetClocksFreq+0xac>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001d84:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <RCC_GetClocksFreq+0x168>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <RCC_GetClocksFreq+0x96>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4a39      	ldr	r2, [pc, #228]	; (8001e78 <RCC_GetClocksFreq+0x170>)
 8001d94:	fb02 f203 	mul.w	r2, r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001d9c:	e00a      	b.n	8001db4 <RCC_GetClocksFreq+0xac>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4a34      	ldr	r2, [pc, #208]	; (8001e74 <RCC_GetClocksFreq+0x16c>)
 8001da2:	fb02 f203 	mul.w	r2, r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001daa:	e003      	b.n	8001db4 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a31      	ldr	r2, [pc, #196]	; (8001e74 <RCC_GetClocksFreq+0x16c>)
 8001db0:	601a      	str	r2, [r3, #0]
      break;
 8001db2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001db4:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <RCC_GetClocksFreq+0x168>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dbc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001dc4:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001dc6:	4a2d      	ldr	r2, [pc, #180]	; (8001e7c <RCC_GetClocksFreq+0x174>)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	18d3      	adds	r3, r2, r3
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	fa22 f203 	lsr.w	r2, r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001de0:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <RCC_GetClocksFreq+0x168>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001de8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001df0:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001df2:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <RCC_GetClocksFreq+0x174>)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	18d3      	adds	r3, r2, r3
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	fa22 f203 	lsr.w	r2, r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <RCC_GetClocksFreq+0x168>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e14:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001e1c:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <RCC_GetClocksFreq+0x174>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	18d3      	adds	r3, r2, r3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	fa22 f203 	lsr.w	r2, r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <RCC_GetClocksFreq+0x168>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e40:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	ea4f 3393 	mov.w	r3, r3, lsr #14
 8001e48:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001e4a:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <RCC_GetClocksFreq+0x178>)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	18d3      	adds	r3, r2, r3
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	611a      	str	r2, [r3, #16]
}
 8001e64:	f107 071c 	add.w	r7, r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	007a1200 	.word	0x007a1200
 8001e78:	003d0900 	.word	0x003d0900
 8001e7c:	20000014 	.word	0x20000014
 8001e80:	20000024 	.word	0x20000024

08001e84 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <RCC_AHBPeriphClockCmd+0x3c>)
 8001e98:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <RCC_AHBPeriphClockCmd+0x3c>)
 8001e9a:	6951      	ldr	r1, [r2, #20]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	615a      	str	r2, [r3, #20]
 8001ea2:	e007      	b.n	8001eb4 <RCC_AHBPeriphClockCmd+0x30>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <RCC_AHBPeriphClockCmd+0x3c>)
 8001ea6:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <RCC_AHBPeriphClockCmd+0x3c>)
 8001ea8:	6951      	ldr	r1, [r2, #20]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	ea6f 0202 	mvn.w	r2, r2
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	615a      	str	r2, [r3, #20]
  }
}
 8001eb4:	f107 070c 	add.w	r7, r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <RCC_APB2PeriphClockCmd+0x3c>)
 8001ed8:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <RCC_APB2PeriphClockCmd+0x3c>)
 8001eda:	6991      	ldr	r1, [r2, #24]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	619a      	str	r2, [r3, #24]
 8001ee2:	e007      	b.n	8001ef4 <RCC_APB2PeriphClockCmd+0x30>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <RCC_APB2PeriphClockCmd+0x3c>)
 8001ee6:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <RCC_APB2PeriphClockCmd+0x3c>)
 8001ee8:	6991      	ldr	r1, [r2, #24]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	ea6f 0202 	mvn.w	r2, r2
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	619a      	str	r2, [r3, #24]
  }
}
 8001ef4:	f107 070c 	add.w	r7, r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000

08001f04 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d006      	beq.n	8001f24 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <RCC_APB1PeriphClockCmd+0x3c>)
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <RCC_APB1PeriphClockCmd+0x3c>)
 8001f1a:	69d1      	ldr	r1, [r2, #28]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	61da      	str	r2, [r3, #28]
 8001f22:	e007      	b.n	8001f34 <RCC_APB1PeriphClockCmd+0x30>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <RCC_APB1PeriphClockCmd+0x3c>)
 8001f26:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <RCC_APB1PeriphClockCmd+0x3c>)
 8001f28:	69d1      	ldr	r1, [r2, #28]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	ea6f 0202 	mvn.w	r2, r2
 8001f30:	400a      	ands	r2, r1
 8001f32:	61da      	str	r2, [r3, #28]
  }
}
 8001f34:	f107 070c 	add.w	r7, r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000

08001f44 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d006      	beq.n	8001f64 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f58:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f5a:	68d1      	ldr	r1, [r2, #12]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	e007      	b.n	8001f74 <RCC_APB2PeriphResetCmd+0x30>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f66:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f68:	68d1      	ldr	r1, [r2, #12]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	ea6f 0202 	mvn.w	r2, r2
 8001f70:	400a      	ands	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]
  }
}
 8001f74:	f107 070c 	add.w	r7, r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000

08001f84 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001f98:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001f9a:	6911      	ldr	r1, [r2, #16]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	611a      	str	r2, [r3, #16]
 8001fa2:	e007      	b.n	8001fb4 <RCC_APB1PeriphResetCmd+0x30>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001fa6:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001fa8:	6911      	ldr	r1, [r2, #16]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	ea6f 0202 	mvn.w	r2, r2
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	611a      	str	r2, [r3, #16]
  }
}
 8001fb4:	f107 070c 	add.w	r7, r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <RCC_BackupResetCmd+0x1c>)
 8001fd0:	79fa      	ldrb	r2, [r7, #7]
 8001fd2:	601a      	str	r2, [r3, #0]
}
 8001fd4:	f107 070c 	add.w	r7, r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	42420440 	.word	0x42420440

08001fe4 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <RCC_ClockSecuritySystemCmd+0x1c>)
 8001ff0:	79fa      	ldrb	r2, [r7, #7]
 8001ff2:	601a      	str	r2, [r3, #0]
}
 8001ff4:	f107 070c 	add.w	r7, r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	4242004c 	.word	0x4242004c

08002004 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <RCC_MCOConfig+0x1c>)
 8002010:	79fa      	ldrb	r2, [r7, #7]
 8002012:	701a      	strb	r2, [r3, #0]
}
 8002014:	f107 070c 	add.w	r7, r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40021007 	.word	0x40021007

08002024 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002046:	b2db      	uxtb	r3, r3
 8002048:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d103      	bne.n	8002058 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <RCC_GetFlagStatus+0x7c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e009      	b.n	800206c <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d103      	bne.n	8002066 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <RCC_GetFlagStatus+0x7c>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e002      	b.n	800206c <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <RCC_GetFlagStatus+0x7c>)
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <RCC_GetFlagStatus+0x68>
  {
    bitstatus = SET;
 8002084:	f04f 0301 	mov.w	r3, #1
 8002088:	74fb      	strb	r3, [r7, #19]
 800208a:	e002      	b.n	8002092 <RCC_GetFlagStatus+0x6e>
  }
  else
  {
    bitstatus = RESET;
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8002092:	7cfb      	ldrb	r3, [r7, #19]
}
 8002094:	4618      	mov	r0, r3
 8002096:	f107 071c 	add.w	r7, r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	40021000 	.word	0x40021000

080020a4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <RCC_ClearFlag+0x18>)
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <RCC_ClearFlag+0x18>)
 80020ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000

080020c0 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <RCC_GetITStatus+0x38>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <RCC_GetITStatus+0x24>
  {
    bitstatus = SET;
 80020dc:	f04f 0301 	mov.w	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e002      	b.n	80020ea <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	f107 0714 	add.w	r7, r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	40021000 	.word	0x40021000

080020fc <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <RCC_ClearITPendingBit+0x1c>)
 8002108:	79fa      	ldrb	r2, [r7, #7]
 800210a:	701a      	strb	r2, [r3, #0]
}
 800210c:	f107 070c 	add.w	r7, r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	4002100a 	.word	0x4002100a

0800211c <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <USART_DeInit+0xb8>)
 8002128:	429a      	cmp	r2, r3
 800212a:	d10c      	bne.n	8002146 <USART_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800212c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002130:	f04f 0101 	mov.w	r1, #1
 8002134:	f7ff ff06 	bl	8001f44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002138:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800213c:	f04f 0100 	mov.w	r1, #0
 8002140:	f7ff ff00 	bl	8001f44 <RCC_APB2PeriphResetCmd>
 8002144:	e042      	b.n	80021cc <USART_DeInit+0xb0>
  }
  else if (USARTx == USART2)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <USART_DeInit+0xbc>)
 800214a:	429a      	cmp	r2, r3
 800214c:	d10c      	bne.n	8002168 <USART_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800214e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002152:	f04f 0101 	mov.w	r1, #1
 8002156:	f7ff ff15 	bl	8001f84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800215a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800215e:	f04f 0100 	mov.w	r1, #0
 8002162:	f7ff ff0f 	bl	8001f84 <RCC_APB1PeriphResetCmd>
 8002166:	e031      	b.n	80021cc <USART_DeInit+0xb0>
  }
  else if (USARTx == USART3)
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <USART_DeInit+0xc0>)
 800216c:	429a      	cmp	r2, r3
 800216e:	d10c      	bne.n	800218a <USART_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002170:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002174:	f04f 0101 	mov.w	r1, #1
 8002178:	f7ff ff04 	bl	8001f84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800217c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002180:	f04f 0100 	mov.w	r1, #0
 8002184:	f7ff fefe 	bl	8001f84 <RCC_APB1PeriphResetCmd>
 8002188:	e020      	b.n	80021cc <USART_DeInit+0xb0>
  }    
  else if (USARTx == UART4)
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <USART_DeInit+0xc4>)
 800218e:	429a      	cmp	r2, r3
 8002190:	d10c      	bne.n	80021ac <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002192:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002196:	f04f 0101 	mov.w	r1, #1
 800219a:	f7ff fef3 	bl	8001f84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800219e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	f7ff feed 	bl	8001f84 <RCC_APB1PeriphResetCmd>
 80021aa:	e00f      	b.n	80021cc <USART_DeInit+0xb0>
  }    
  else
  {
    if (USARTx == UART5)
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <USART_DeInit+0xc8>)
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d10b      	bne.n	80021cc <USART_DeInit+0xb0>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80021b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80021b8:	f04f 0101 	mov.w	r1, #1
 80021bc:	f7ff fee2 	bl	8001f84 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80021c0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80021c4:	f04f 0100 	mov.w	r1, #0
 80021c8:	f7ff fedc 	bl	8001f84 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80021cc:	f107 0708 	add.w	r7, r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40013800 	.word	0x40013800
 80021d8:	40004400 	.word	0x40004400
 80021dc:	40004800 	.word	0x40004800
 80021e0:	40004c00 	.word	0x40004c00
 80021e4:	40005000 	.word	0x40005000

080021e8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	8a1b      	ldrh	r3, [r3, #16]
 8002218:	b29b      	uxth	r3, r3
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221e:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8002222:	4013      	ands	r3, r2
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	88db      	ldrh	r3, [r3, #6]
 800222a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800222c:	4313      	orrs	r3, r2
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002232:	b29a      	uxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	899b      	ldrh	r3, [r3, #12]
 800223c:	b29b      	uxth	r3, r3
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002242:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8002246:	4013      	ands	r3, r2
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	889a      	ldrh	r2, [r3, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	891b      	ldrh	r3, [r3, #8]
 8002252:	4313      	orrs	r3, r2
 8002254:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800225a:	4313      	orrs	r3, r2
 800225c:	b29b      	uxth	r3, r3
 800225e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002260:	4313      	orrs	r3, r2
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002266:	b29a      	uxth	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	8a9b      	ldrh	r3, [r3, #20]
 8002270:	b29b      	uxth	r3, r3
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8002274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002276:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800227a:	4013      	ands	r3, r2
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	899b      	ldrh	r3, [r3, #12]
 8002282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002284:	4313      	orrs	r3, r2
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fd37 	bl	8001d08 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	4b37      	ldr	r3, [pc, #220]	; (800237c <USART_Init+0x194>)
 800229e:	429a      	cmp	r2, r3
 80022a0:	d102      	bne.n	80022a8 <USART_Init+0xc0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a6:	e001      	b.n	80022ac <USART_Init+0xc4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	899b      	ldrh	r3, [r3, #12]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da0f      	bge.n	80022da <USART_Init+0xf2>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80022ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022bc:	4613      	mov	r3, r2
 80022be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80022c2:	189b      	adds	r3, r3, r2
 80022c4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80022c8:	189a      	adds	r2, r3, r2
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
 80022d8:	e00e      	b.n	80022f8 <USART_Init+0x110>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80022da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022dc:	4613      	mov	r3, r2
 80022de:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80022e2:	189b      	adds	r3, r3, r2
 80022e4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80022e8:	189a      	adds	r2, r3, r2
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80022f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <USART_Init+0x198>)
 80022fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002300:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002304:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8002310:	f04f 0264 	mov.w	r2, #100	; 0x64
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	899b      	ldrh	r3, [r3, #12]
 8002322:	b29b      	uxth	r3, r3
 8002324:	b29b      	uxth	r3, r3
 8002326:	b21b      	sxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	da0f      	bge.n	800234c <USART_Init+0x164>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002332:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <USART_Init+0x198>)
 8002338:	fba3 1302 	umull	r1, r3, r3, r2
 800233c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002346:	4313      	orrs	r3, r2
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234a:	e00e      	b.n	800236a <USART_Init+0x182>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002352:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <USART_Init+0x198>)
 8002358:	fba3 1302 	umull	r1, r3, r3, r2
 800235c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002366:	4313      	orrs	r3, r2
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	b29a      	uxth	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	811a      	strh	r2, [r3, #8]
}
 8002372:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40013800 	.word	0x40013800
 8002380:	51eb851f 	.word	0x51eb851f

08002384 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002392:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f04f 020c 	mov.w	r2, #12
 80023b2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	819a      	strh	r2, [r3, #12]
}
 80023bc:	f107 070c 	add.w	r7, r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop

080023c8 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8a1b      	ldrh	r3, [r3, #16]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	881a      	ldrh	r2, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80023f2:	4313      	orrs	r3, r2
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	889b      	ldrh	r3, [r3, #4]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	88db      	ldrh	r3, [r3, #6]
 8002402:	4313      	orrs	r3, r2
 8002404:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	b29a      	uxth	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	821a      	strh	r2, [r3, #16]
}
 8002414:	f107 0714 	add.w	r7, r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop

08002420 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	80da      	strh	r2, [r3, #6]
}
 8002448:	f107 070c 	add.w	r7, r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop

08002454 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	899b      	ldrh	r3, [r3, #12]
 800246a:	b29b      	uxth	r3, r3
 800246c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	819a      	strh	r2, [r3, #12]
 8002476:	e007      	b.n	8002488 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	899b      	ldrh	r3, [r3, #12]
 800247c:	b29b      	uxth	r3, r3
 800247e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002482:	b29a      	uxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	819a      	strh	r2, [r3, #12]
  }
}
 8002488:	f107 070c 	add.w	r7, r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop

08002494 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	460a      	mov	r2, r1
 80024a0:	807a      	strh	r2, [r7, #2]
 80024a2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f04f 0201 	mov.w	r2, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d104      	bne.n	80024f0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f103 030c 	add.w	r3, r3, #12
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e00b      	b.n	8002508 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d104      	bne.n	8002500 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f103 0310 	add.w	r3, r3, #16
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e003      	b.n	8002508 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f103 0314 	add.w	r3, r3, #20
 8002506:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	6811      	ldr	r1, [r2, #0]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e007      	b.n	800252c <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	6811      	ldr	r1, [r2, #0]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	ea6f 0202 	mvn.w	r2, r2
 8002528:	400a      	ands	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
  }
}
 800252c:	f107 071c 	add.w	r7, r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop

08002538 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	460a      	mov	r2, r1
 8002544:	807a      	strh	r2, [r7, #2]
 8002546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8002548:	787b      	ldrb	r3, [r7, #1]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8a9b      	ldrh	r3, [r3, #20]
 8002552:	b29a      	uxth	r2, r3
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	4313      	orrs	r3, r2
 8002558:	b29a      	uxth	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	829a      	strh	r2, [r3, #20]
 800255e:	e00a      	b.n	8002576 <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8a9b      	ldrh	r3, [r3, #20]
 8002564:	b29a      	uxth	r2, r3
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	ea6f 0303 	mvn.w	r3, r3
 800256c:	b29b      	uxth	r3, r3
 800256e:	4013      	ands	r3, r2
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	829a      	strh	r2, [r3, #20]
  }
}
 8002576:	f107 070c 	add.w	r7, r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8a1b      	ldrh	r3, [r3, #16]
 8002590:	b29b      	uxth	r3, r3
 8002592:	f023 030f 	bic.w	r3, r3, #15
 8002596:	b29a      	uxth	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8a1b      	ldrh	r3, [r3, #16]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4313      	orrs	r3, r2
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	821a      	strh	r2, [r3, #16]
}
 80025ae:	f107 070c 	add.w	r7, r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	899b      	ldrh	r3, [r3, #12]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	899b      	ldrh	r3, [r3, #12]
 80025d8:	b29a      	uxth	r2, r3
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	4313      	orrs	r3, r2
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	819a      	strh	r2, [r3, #12]
}
 80025e4:	f107 070c 	add.w	r7, r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop

080025f0 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	899b      	ldrh	r3, [r3, #12]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	b29a      	uxth	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	819a      	strh	r2, [r3, #12]
 8002612:	e007      	b.n	8002624 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	899b      	ldrh	r3, [r3, #12]
 8002618:	b29b      	uxth	r3, r3
 800261a:	f023 0302 	bic.w	r3, r3, #2
 800261e:	b29a      	uxth	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	819a      	strh	r2, [r3, #12]
  }
}
 8002624:	f107 070c 	add.w	r7, r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop

08002630 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8a1b      	ldrh	r3, [r3, #16]
 8002640:	b29b      	uxth	r3, r3
 8002642:	f023 0320 	bic.w	r3, r3, #32
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8a1b      	ldrh	r3, [r3, #16]
 8002650:	b29a      	uxth	r2, r3
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	4313      	orrs	r3, r2
 8002656:	b29a      	uxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	821a      	strh	r2, [r3, #16]
}
 800265c:	f107 070c 	add.w	r7, r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8a1b      	ldrh	r3, [r3, #16]
 800267e:	b29b      	uxth	r3, r3
 8002680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002684:	b29a      	uxth	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	821a      	strh	r2, [r3, #16]
 800268a:	e007      	b.n	800269c <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8a1b      	ldrh	r3, [r3, #16]
 8002690:	b29b      	uxth	r3, r3
 8002692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002696:	b29a      	uxth	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	821a      	strh	r2, [r3, #16]
  }
}
 800269c:	f107 070c 	add.w	r7, r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop

080026a8 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80026b4:	887b      	ldrh	r3, [r7, #2]
 80026b6:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80026ba:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80026be:	b29a      	uxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	809a      	strh	r2, [r3, #4]
}
 80026c4:	f107 070c 	add.w	r7, r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop

080026d0 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	889b      	ldrh	r3, [r3, #4]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80026e2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80026e6:	b29b      	uxth	r3, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	f107 070c 	add.w	r7, r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	899b      	ldrh	r3, [r3, #12]
 8002700:	b29b      	uxth	r3, r3
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	819a      	strh	r2, [r3, #12]
}
 800270c:	f107 070c 	add.w	r7, r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop

08002718 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8b1b      	ldrh	r3, [r3, #24]
 8002728:	b29b      	uxth	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	b29a      	uxth	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	8b1b      	ldrh	r3, [r3, #24]
 8002736:	b29a      	uxth	r2, r3
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	b29b      	uxth	r3, r3
 800273c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002740:	b29b      	uxth	r3, r3
 8002742:	4313      	orrs	r3, r2
 8002744:	b29a      	uxth	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	831a      	strh	r2, [r3, #24]
}
 800274a:	f107 070c 	add.w	r7, r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8b1b      	ldrh	r3, [r3, #24]
 8002764:	b29b      	uxth	r3, r3
 8002766:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800276a:	b29a      	uxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8b1b      	ldrh	r3, [r3, #24]
 8002774:	b29a      	uxth	r2, r3
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	b29b      	uxth	r3, r3
 800277a:	4313      	orrs	r3, r2
 800277c:	b29a      	uxth	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	831a      	strh	r2, [r3, #24]
}
 8002782:	f107 070c 	add.w	r7, r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	8a9b      	ldrh	r3, [r3, #20]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f043 0320 	orr.w	r3, r3, #32
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	829a      	strh	r2, [r3, #20]
 80027ae:	e007      	b.n	80027c0 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8a9b      	ldrh	r3, [r3, #20]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f023 0320 	bic.w	r3, r3, #32
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	829a      	strh	r2, [r3, #20]
  }
}
 80027c0:	f107 070c 	add.w	r7, r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop

080027cc <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8a9b      	ldrh	r3, [r3, #20]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f043 0310 	orr.w	r3, r3, #16
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	829a      	strh	r2, [r3, #20]
 80027ee:	e007      	b.n	8002800 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8a9b      	ldrh	r3, [r3, #20]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f023 0310 	bic.w	r3, r3, #16
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	829a      	strh	r2, [r3, #20]
  }
}
 8002800:	f107 070c 	add.w	r7, r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop

0800280c <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8a9b      	ldrh	r3, [r3, #20]
 8002822:	b29b      	uxth	r3, r3
 8002824:	f043 0308 	orr.w	r3, r3, #8
 8002828:	b29a      	uxth	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	829a      	strh	r2, [r3, #20]
 800282e:	e007      	b.n	8002840 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8a9b      	ldrh	r3, [r3, #20]
 8002834:	b29b      	uxth	r3, r3
 8002836:	f023 0308 	bic.w	r3, r3, #8
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	829a      	strh	r2, [r3, #20]
  }
}
 8002840:	f107 070c 	add.w	r7, r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop

0800284c <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	899b      	ldrh	r3, [r3, #12]
 8002862:	b29b      	uxth	r3, r3
 8002864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	819a      	strh	r2, [r3, #12]
 8002872:	e009      	b.n	8002888 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	899b      	ldrh	r3, [r3, #12]
 8002878:	b29b      	uxth	r3, r3
 800287a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800287e:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8002882:	b29a      	uxth	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	819a      	strh	r2, [r3, #12]
  }
}
 8002888:	f107 070c 	add.w	r7, r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop

08002894 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8a9b      	ldrh	r3, [r3, #20]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	829a      	strh	r2, [r3, #20]
 80028b6:	e007      	b.n	80028c8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8a9b      	ldrh	r3, [r3, #20]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	829a      	strh	r2, [r3, #20]
  }
}
 80028c8:	f107 070c 	add.w	r7, r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop

080028d4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8a9b      	ldrh	r3, [r3, #20]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f023 0304 	bic.w	r3, r3, #4
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8a9b      	ldrh	r3, [r3, #20]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	829a      	strh	r2, [r3, #20]
}
 8002900:	f107 070c 	add.w	r7, r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop

0800290c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8a9b      	ldrh	r3, [r3, #20]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	829a      	strh	r2, [r3, #20]
 800292e:	e007      	b.n	8002940 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8a9b      	ldrh	r3, [r3, #20]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f023 0302 	bic.w	r3, r3, #2
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	829a      	strh	r2, [r3, #20]
  }
}
 8002940:	f107 070c 	add.w	r7, r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29a      	uxth	r2, r3
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	4013      	ands	r3, r2
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800296e:	f04f 0301 	mov.w	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	e002      	b.n	800297c <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	f107 0714 	add.w	r7, r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop

0800298c <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	ea6f 0303 	mvn.w	r3, r3
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	801a      	strh	r2, [r3, #0]
}
 80029a4:	f107 070c 	add.w	r7, r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80029d4:	887b      	ldrh	r3, [r7, #2]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f04f 0201 	mov.w	r2, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d106      	bne.n	8002a08 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	899b      	ldrh	r3, [r3, #12]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4013      	ands	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e00f      	b.n	8002a28 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d106      	bne.n	8002a1c <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	8a1b      	ldrh	r3, [r3, #16]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4013      	ands	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e005      	b.n	8002a28 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8a9b      	ldrh	r3, [r3, #20]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4013      	ands	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f04f 0201 	mov.w	r2, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <USART_GetITStatus+0xae>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 8002a56:	f04f 0301 	mov.w	r3, #1
 8002a5a:	74fb      	strb	r3, [r7, #19]
 8002a5c:	e002      	b.n	8002a64 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	f107 071c 	add.w	r7, r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop

08002a74 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	81fb      	strh	r3, [r7, #14]
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
 8002a8c:	887b      	ldrh	r3, [r7, #2]
 8002a8e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002a92:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002a94:	89fb      	ldrh	r3, [r7, #14]
 8002a96:	f04f 0201 	mov.w	r2, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8002aa0:	89bb      	ldrh	r3, [r7, #12]
 8002aa2:	ea6f 0303 	mvn.w	r3, r3
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	801a      	strh	r2, [r3, #0]
}
 8002aac:	f107 0714 	add.w	r7, r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
